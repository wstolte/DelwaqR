require(plyr)
require(reshape2)
require(ggplot2)
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
rws_dat           <- read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\RWS\\MWTL_all.csv",dec = ".")
rws_dat$datetime   <- as.POSIXct(rws_dat$datetime, format = "%d-%m-%y %H:%M")
rws_dat$variable   <- mapvalues(as.character(rws_dat$parhdhcod), from = submap$RWS_DONAR_parcod_hdh2, to = submap$Delwaq_long_name, warn_missing = F)
# rws_dat$location   <- mapvalues(as.character(rws_dat$locoms), from = locmap$locoms, to = locmap$Delwaq_ED, warn_missing = F)
# rws_dat$variable   <- mapvalues(as.character(rws_dat$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
rws_dat$month      <- format(rws_dat$datetime, format = "%m")
unique(rws_dat$variable)
rws_dat <- subset(rws_dat, rws_dat$wrd < 0.6 | rws_dat$variable != "phosphate")
rws_dat <- subset(rws_dat, rws_dat$wrd < 0.6 | rws_dat$variable != "ammonium")
rws_dat <- subset(rws_dat, rws_dat$wrd < 75 | rws_dat$variable != "chlorophyll-a")
rws_dat <- subset(rws_dat, rws_dat$wrd < 1e11 )
save(rws_dat, file = "d:/Tools_Scripts/R/ShinyMeetEems/MWTL_Eems_bewerkt.Rdata")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
rws_dat <- subset(rws_dat, rws_dat$wrd !< 0 )
rws_dat <- subset(rws_dat, rws_dat$wrd >= 0 )
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
save(rws_dat, file = "d:/Tools_Scripts/R/ShinyMeetEems/MWTL_Eems_bewerkt.Rdata")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
rws_dat$locoms
unique(rws_dat$locoms)
rws_dat <- subset(rws_dat, rws_dat$wrd < 0.2 | rws_dat$variable != "phosphate" | rws_dat$variable != "Terschelling 10 km uit de kust")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
unique(rws_dat$variable)
rws_dat <- subset(rws_dat, rws_dat$wrd < 1 | rws_dat$variable != "P nf")
save(rws_dat, file = "d:/Tools_Scripts/R/ShinyMeetEems/MWTL_Eems_bewerkt.Rdata")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
rws_dat <- subset(rws_dat, rws_dat$wrd < 1 | rws_dat$variable != "TotP")
save(rws_dat, file = "d:/Tools_Scripts/R/ShinyMeetEems/MWTL_Eems_bewerkt.Rdata")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
#######################################################################
####                                                               ####
####          Script by willem.stolte@deltares.nl                  ####
####    Reads MWTL csv and  makes season and long term graphs      ####
####                                                               ####
####                copyright Deltares                             ####
####                                                               ####
#######################################################################
require(scales)
require(plyr)
require(reshape2)
require(ggplot2)
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
rws_dat           <- read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\RWS\\MWTL_all.csv",dec = ".")
rws_dat$datetime   <- as.POSIXct(rws_dat$datetime, format = "%d-%m-%y %H:%M")
rws_dat$variable   <- mapvalues(as.character(rws_dat$parhdhcod), from = submap$RWS_DONAR_parcod_hdh2, to = submap$Delwaq_long_name, warn_missing = F)
# rws_dat$location   <- mapvalues(as.character(rws_dat$locoms), from = locmap$locoms, to = locmap$Delwaq_ED, warn_missing = F)
# rws_dat$variable   <- mapvalues(as.character(rws_dat$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
rws_dat$month      <- format(rws_dat$datetime, format = "%m")
#filter for high PO4 and NH4 measurements
rws_dat <- subset(rws_dat, rws_dat$wrd < 0.6 | rws_dat$variable != "phosphate")
rws_dat <- subset(rws_dat, rws_dat$wrd < 1 | rws_dat$variable != "P nf")
rws_dat <- subset(rws_dat, rws_dat$wrd < 1 | rws_dat$variable != "TotP")
rws_dat <- subset(rws_dat, rws_dat$wrd < 0.6 | rws_dat$variable != "ammonium")
rws_dat <- subset(rws_dat, rws_dat$wrd < 75 | rws_dat$variable != "chlorophyll-a")
rws_dat <- subset(rws_dat, rws_dat$wrd < 3 | rws_dat$variable != "N pg")
rws_dat <- subset(rws_dat, rws_dat$wrd < 1e11 )
rws_dat <- subset(rws_dat, rws_dat$wrd >= 0 )
save(rws_dat, file = "d:/Tools_Scripts/R/ShinyMeetEems/MWTL_Eems_bewerkt.Rdata")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
source("R/io.R")
source("R/plotfunctions.r")
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
submod = c("Salinity", "ExtVl", "Chlfa", "OXY"); plotname = "light"
# submod = c("PO4", "NO3", "NH4", "Si"); plotname = "nutrients"
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-28-min25_y2-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
moddat <- arr2df( arr = modarr, submod = submod, locmod = locmod)
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = c("IM02", "IM03", "IM04")
locations = "WZ460_Wierumergronde"
# locations = c("A1", "A2", "A3", "A4", "A5", "A6")
locations = c("EDB01", "EDB03", "EDB04", "EDB05", "EDB06")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "Si", limmod = limmod, plottype = 1)
locations = c("IM02", "IM03", "IM04")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "Si", limmod = limmod, plottype = 1)
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
locations = c("A1", "A2", "A3", "A4", "A5", "A6")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
locations = c("IM00", "IM01", "IM02", "IM03",
"IM04", "IM05", "IM06", "IM07",
"IM08", "IM09", "IM10")
# locations = "WZ460_Wierumergronde"
locations = c("A1", "A2", "A3", "A4", "A5", "A6")
locations = c("IM00", "IM01", "IM02", "IM03",
"IM04", "IM05", "IM06", "IM07",
"IM08", "IM09", "IM10")
# locations = "WZ460_Wierumergronde"
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
modversion = "eco-scen4-run1-28-min25-nut40-y2-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
moddat <- arr2df( arr = modarr, submod = submod, locmod = locmod)
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = c("IM00", "IM01", "IM02", "IM03",
"IM04", "IM05", "IM06", "IM07",
"IM08", "IM09", "IM10")
# locations = "WZ460_Wierumergronde"
# locations = c("A1", "A2", "A3", "A4", "A5", "A6")
# locations = c("EDB01", "EDB03", "EDB04", "EDB05", "EDB06")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
shiny::runApp('D:/Tools_Scripts/R/ShinyDemo')
library(shiny)
library(ggplot2)
## Load data, specify path when needed
load(file = "MWTL_Eems_bewerkt.Rdata")
load(file = "map.Rdata")
load(file = "MWTL_Eems_bewerkt.Rdata")
load(file = "map.Rdata")
require()
## nu even zo, moet uit package komen
source("R/io.R")
source("R/plotfunctions.r")
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
submod = c("Salinity", "ExtVl", "Chlfa", "OXY"); plotname = "light"
# submod = c("PO4", "NO3", "NH4", "Si"); plotname = "nutrients"
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-28-y2-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
moddat <- arr2df( arr = modarr, submod = submod, locmod = locmod)
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = c("IM00", "IM01", "IM02", "IM03",
"IM04", "IM05", "IM06", "IM07",
"IM08", "IM09", "IM10")
# locations = "WZ460_Wierumergronde"
# locations = c("A1", "A2", "A3", "A4", "A5", "A6")
# locations = c("EDB01", "EDB03", "EDB04", "EDB05", "EDB06")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = locmod
locations = c("WZ590_ZO_Lauwers_oos", "Ra", "Paap", "Huibertgat_oost", "Bocht_van_Watum", "Groote_Gat_noord", "Nieuwe_Statenzijl_bu")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = c("fPPtot"), limmod = limmod, plottype = 1)
## nu even zo, moet uit package komen
source("R/io.R")
source("R/plotfunctions.r")
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-28-y2-day"
modversion = "eco-scen4-run1-28-y2-2-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
##===============================================
## MAKE ECOPLOT DIAGRAMS
##==============================================
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
# locations = c("IM00", "IM01", "IM02", "IM03",
#               "IM04", "IM05", "IM06", "IM07",
#               "IM08", "IM09", "IM10")
# locations = "WZ460_Wierumergronde"
# locations = c("A1", "A2", "A3", "A4", "A5", "A6")
# locations = c("EDB01", "EDB03", "EDB04", "EDB05", "EDB06")
locations = c("WZ590_ZO_Lauwers_oos", "Ra", "Paap", "Huibertgat_oost",
"Bocht_van_Watum", "Groote_Gat_noord", "Nieuwe_Statenzijl_bu")
locations =
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
modversion = "eco-scen4-run1-28-y2_2-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = c("WZ590_ZO_Lauwers_oos", "Ra", "Paap", "Huibertgat_oost",
"Bocht_van_Watum", "Groote_Gat_noord", "Nieuwe_Statenzijl_bu")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
date()
?date
format(date(), "%Y%m%d")
format(Sys.Date(), "%Y%m%d")
ggsave(file.path(savedir, paste(format(date(), "%Y%m%d"), plotname, "ecoplot", modversion, ".png", sep = "_")),
width = 10, height = 8)
format(date(), "%Y%m%d")
ggsave(file.path(savedir, paste(format(Sys.Date(), "%Y%m%d"), plotname, "ecoplot", modversion, ".png", sep = "_")),
width = 10, height = 8)
require(plyr)
require(ggplot2)
require(scales)
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
# locmod <- c("A2")
# locmod <- c("EDB01area", "EDB03area", "EDB04area", "EDB05area", "EDB06area")
locmod <- c("EDB01")#, "EDB03", "EDB04", "EDB05", "EDB06")
locmod <- c("EDB01"), "EDB03", "EDB04", "EDB05", "EDB06")
locmod <- c("EDB01", "EDB03", "EDB04", "EDB05", "EDB06")
submod = c("ULVAF_P", "PO4", "NO3", "Si"); plotname = "BentDiatNuts"
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-28-y2_2-day"
beginsummer <- as.POSIXct("2012-04-01")
endsummer <- as.POSIXct("2012-09-30")
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
moddat <- arr2df( arr = modarr, submod = submod, locmod = locmod)
moddat$variable   <- as.factor(mapvalues(as.character(moddat$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F))
moddat$variable <- factor(moddat$variable,
levels = mapvalues(submod, from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F))
# # im_dat <-read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\IMARES\\2013_nutrients_long.csv",dec = ".")
im_dat <-read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\IMARES\\all_nutrients_long.csv",dec = ".")
im_dat$time <- as.POSIXct(im_dat$datetime, format = "%d-%m-%y %H:%M")
im_dat$variable   <- mapvalues(as.character(im_dat$variable), from = submap$short_name, to = submap$Delwaq, warn_missing = F)
im_dat$location <- mapvalues(as.character(im_dat$imst_loccode), from = locmap$IMARES_st, to = locmap$Delwaq_ED, warn_missing = F)
im_dat2 <- subset(im_dat, im_dat$variable %in% submod &
im_dat$location %in% locmod &
im_dat$time > min(moddat$time) &
im_dat$time < max(moddat$time))
im_dat2$variable   <- mapvalues(as.character(im_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
rws_dat <- read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\RWS\\MWTL_all.csv",dec = ".")
rws_dat$time <- as.POSIXct(rws_dat$datetime, format = "%d-%m-%y %H:%M")
rws_dat$variable   <- mapvalues(as.character(rws_dat$parhdhcod), from = submap$RWS_DONAR_parcod_hdh2, to = submap$Delwaq, warn_missing = F)
rws_dat$location <- mapvalues(as.character(rws_dat$locoms), from = locmap$locoms, to = locmap$Delwaq_ED, warn_missing = F)
rws_dat2 <- subset(rws_dat, rws_dat$variable %in% submod &
rws_dat$location %in% locmod &
rws_dat$time > min(moddat$time) &
rws_dat$time < max(moddat$time)
)
rws_dat2$variable   <- mapvalues(as.character(rws_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
#filter for high PO4 and NH4 measurements
rws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != "phosphate")
rws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != "ammonium")
rws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 1e11 )
# castim_dat <- dcast(im_dat, formula = time +  location ~ variable)
p <- ggplot(moddat,(aes(time, value)))
p + geom_line(color = "darkolivegreen", size = 1) +
geom_point(data = im_dat2, aes(time, value), color = "blue", size = 3, alpha = 0.6) +
geom_point(data = rws_dat2, aes(time, wrd), color = "red", size = 3, alpha = 0.6) +
facet_grid(variable ~ location, scales = "free") +
scale_x_datetime(breaks = date_breaks("2 months"),
labels = date_format("%b"))
ggsave(file.path(savedir, paste(format(Sys.Date("%Y%m%d")), plotname, modversion, ".png", sep = "_")),
width = 12, height = 4)
ggsave(file.path(savedir, paste(format(Sys.Date(),"%Y%m%d"), plotname, modversion, ".png", sep = "_")),
width = 12, height = 4)
ggsave(file.path(savedir, paste(format(Sys.Date(),"%Y%m%d"), plotname, modversion, ".png", sep = "_")),
width = 12, height = 12)
ggsave(file.path(savedir, paste(format(Sys.Date(),"%Y%m%d"), plotname, modversion, ".png", sep = "_")),
width = 8, height = 8)
width = 9, height = 8)
ggsave(file.path(savedir, paste(format(Sys.Date(),"%Y%m%d"), plotname, modversion, ".png", sep = "_")),
width = 9, height = 8)
shiny::runApp('D:/Tools_Scripts/R/ShinyDelwaqEems')
source('D:/REPOS-CHECK-OUTS/OpenEarthTools/r/applications/Delft3D/DelwaqR/R/io.R', echo=TRUE)
require(scales)
require(plyr)
require(reshape2)
require(ggplot2)
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
rws_dat           <- read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\RWS\\MWTL_all.csv",dec = ".")
rws_dat$datetime   <- as.POSIXct(rws_dat$datetime, format = "%d-%m-%y %H:%M")
rws_dat$variable   <- mapvalues(as.character(rws_dat$parhdhcod), from = submap$RWS_DONAR_parcod_hdh2, to = submap$Delwaq_long_name, warn_missing = F)
rws_dat$month      <- format(rws_dat$datetime, format = "%m")
#filter for high PO4 and NH4 measurements
rws_dat <- subset(rws_dat, rws_dat$wrd < 0.6 | rws_dat$variable != "phosphate")
rws_dat <- subset(rws_dat, rws_dat$wrd < 1 | rws_dat$variable != "P nf")
rws_dat <- subset(rws_dat, rws_dat$wrd < 1 | rws_dat$variable != "TotP")
rws_dat <- subset(rws_dat, rws_dat$wrd < 0.6 | rws_dat$variable != "ammonium")
rws_dat <- subset(rws_dat, rws_dat$wrd < 75 | rws_dat$variable != "chlorophyll-a")
rws_dat <- subset(rws_dat, rws_dat$wrd < 3 | rws_dat$variable != "N pg")
rws_dat <- subset(rws_dat, rws_dat$wrd < 30 | rws_dat$variable != "dissolved org C")
rws_dat <- subset(rws_dat, rws_dat$wrd < 1e11 )
rws_dat <- subset(rws_dat, rws_dat$wrd >= 0 )
unique(rws_dat$locoms)
substance <- c("TN", "TP")
location  <- c("Groote Gat noord", "Huibertgat oost")
subdf = subset(rws_dat, rws_dat$variable %in% substance &
rws_dat$locoms %in% location &
rws_dat$wrd < 500)
x = as.numeric(subdf$datetime); y = subdf$wrd
regression <- summary(glm(y ~ x + I(cos(2 * pi * x / 31622400)) + I(sin(2 * pi * x / 31622400))))
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
pl <- pl + geom_abline(intercept = intercept, slope = slope , color = "darkblue", size = 1)
pl <- pl + theme(text = element_text(size = 16))
pl <- pl + xlab("date") + ylab(substance) #+ scale_y_continuous(limits = c(0,0.2))
print(pl)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
print(pl)
subdf = subset(rws_dat, rws_dat$variable %in% substance &
rws_dat$locoms %in% location &
rws_dat$wrd < 500)
unique(rws_dat$variable)
substance <- c("TotN", "TotP")
location  <- c("Groote Gat noord", "Huibertgat oost")
subdf = subset(rws_dat, rws_dat$variable %in% substance &
rws_dat$locoms %in% location &
rws_dat$wrd < 500)
x = as.numeric(subdf$datetime); y = subdf$wrd
regression <- summary(glm(y ~ x + I(cos(2 * pi * x / 31622400)) + I(sin(2 * pi * x / 31622400))))
slope <- regression$coefficients[[2]]  #slope of regression including season effect
intercept <- regression$coefficients[[1]]
regression
print(paste("slope is: ", slope*31622400, "per year"))
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
print(pl)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
print(pl)
pl <- pl + geom_abline(intercept = intercept, slope = slope , color = "darkblue", size = 1)
print(pl)
unique(rws_dat$locoms)
location  <- c("Groote Gat noord", "Bocht van Watum", "Huibertgat oost")
subdf = subset(rws_dat, rws_dat$variable %in% substance &
rws_dat$locoms %in% location &
rws_dat$wrd < 500)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
print(pl)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(locoms ~ variable, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
# pl <- pl + geom_abline(intercept = intercept, slope = slope , color = "darkblue", size = 1)
pl <- pl + theme(text = element_text(size = 16))
pl <- pl + xlab("date") + ylab(substance) #+ scale_y_continuous(limits = c(0,0.2))
print(pl)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
# pl <- pl + geom_abline(intercept = intercept, slope = slope , color = "darkblue", size = 1)
pl <- pl + theme(text = element_text(size = 16))
pl <- pl + xlab("date") + ylab(substance) #+ scale_y_continuous(limits = c(0,0.2))
print(pl)
subdf$locoms <- factor(subdf$locoms, levels = location)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
# pl <- pl + geom_abline(intercept = intercept, slope = slope , color = "darkblue", size = 1)
pl <- pl + theme(text = element_text(size = 16))
pl <- pl + xlab("date") + ylab(substance) #+ scale_y_continuous(limits = c(0,0.2))
print(pl)
substance <- c("NO3", "PO4")
location  <- c("Groote Gat noord", "Bocht van Watum", "Huibertgat oost")
subdf = subset(rws_dat, rws_dat$variable %in% substance &
rws_dat$locoms %in% location &
rws_dat$wrd < 500)
subdf$locoms <- factor(subdf$locoms, levels = location)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
# pl <- pl + geom_abline(intercept = intercept, slope = slope , color = "darkblue", size = 1)
pl <- pl + theme(text = element_text(size = 16))
pl <- pl + xlab("date") + ylab(substance) #+ scale_y_continuous(limits = c(0,0.2))
print(pl)
substance <- c("nitrate", "phosphate")
location  <- c("Groote Gat noord", "Bocht van Watum", "Huibertgat oost")
subdf = subset(rws_dat, rws_dat$variable %in% substance &
rws_dat$locoms %in% location &
rws_dat$wrd < 500)
subdf$locoms <- factor(subdf$locoms, levels = location)
pl <- ggplot(subdf, aes(datetime, wrd))
pl <- pl + facet_grid(variable ~ locoms, scales = "free") #+ scale_x_datetime(limits = c(as.POSIXct("2004-01-01"), as.POSIXct("2013-12-31")))
pl <- pl + geom_point()
# pl <- pl + geom_smooth(aes(group = 1) , method="lm")
pl <- pl + geom_smooth(aes(), method='lm', formula = y ~ x+I(cos(2*pi*x/31622400))+I(sin(2*pi*x/31622400)), size = 0.5, alpha = 0.5)
# pl <- pl + geom_abline(intercept = intercept, slope = slope , color = "darkblue", size = 1)
pl <- pl + theme(text = element_text(size = 16))
pl <- pl + xlab("date") + ylab(substance) #+ scale_y_continuous(limits = c(0,0.2))
print(pl)
subdf$year <- ifelse(month == 12,
format(subdf$datetime, "%Y") - 1 year,
subdf$year <- ifelse(month == 12,
format(subdf$datetime, "%Y") - 1,
format(subdf$datetime, "%Y"))
subdf$year <- ifelse(subdf$month == 12,
format(subdf$datetime, "%Y") - 1,
format(subdf$datetime, "%Y"))
subdf$year <- ifelse(subdf$month == 12,
format(subdf$datetime - 1 year, "%Y"),
format(subdf$datetime, "%Y"))
subdf$year <- ifelse(subdf$month == 12,
format(subdf$datetime - 1 year, "%Y"),
subdf$year <- ifelse(subdf$month == 12,
format(subdf$datetime - 1, "%Y"),
format(subdf$datetime, "%Y"))
View(subdf)
subdf$year <- ifelse(subdf$month == 12,
format(subdf$datetime - 31622400, "%Y"),
format(subdf$datetime, "%Y"))
View(subdf)
subdf$year <- ifelse(subdf$month == 12,
format(subdf$datetime + 31622400, "%Y"),
format(subdf$datetime, "%Y"))
subdf.winter <- subdf[subdf$month %in% c(12,1,2)]
subdf.winter <- subdf[,subdf$month %in% c(12,1,2)]
subdf.winter <- subdf[subdf$month %in% c(12,1,2),]
View(subdf.winter)
View(subdf)
subdf.winter <- subdf[subdf$month %in% c(12,01,02),]
subdf.winter <- subdf[subdf$month %in% c("12","01","02"),]
summary.winter <- ddply(subdf.winter, summarize, mean = mean)
summary.winter <- ddply(subdf.winter, . ~ year
summarize, mean = mean)
summary.winter <- ddply(subdf.winter, .(variable + locoms + year),
summarize, mean = mean)
summary.winter <- ddply(subdf.winter, .(variable,locoms,year),
summarize, mean = mean)
summary.winter <- ddply(subdf.winter, . ~ variable + locoms + year,
summarize, mean = mean)
summary.winter <- ddply(subdf.winter,  ~ variable + locoms + year,
summarize, mean = mean)
summary.winter <- ddply(subdf.winter,  ~ variable + locoms + year,
summarize, mean)
summary.winter <- ddply(subdf.winter,  ~ variable + locoms + year)
View(summary.winter)
summary.winter <- ddply(subdf.winter, wrd ~ variable + locoms + year)
summary.winter <- ddply(subdf.winter, wrd ~ variable + locoms + year,
summarize, mean = mean)
?ddply
summary.winter <- ddply(subdf.winter, . variable + locoms + year,
summarize)
summary.winter <- ddply(subdf.winter, . variable + locoms + year,
summarize, mean = mean)
summary.winter <- ddply(subdf.winter, . variable + locoms + year,
summarize, mean = mean)
summary.winter <- ddply(subdf.winter, . variable + locoms + year,
summary.winter <- ddply(subdf.winter, .(variable, locoms, year),
summarize, mean = mean)
summary.winter <- ddply(subdf.winter, .(variable, locoms, year),
summarize, mean = mean)
summary.winter <- ddply(subdf.winter, .(variable, locoms, year),
summarize, mean)
summary.winter <- ddply(subdf.winter, .(variable, locoms, year),
summarize, mean = mean(wrd))
pl2 <- ggplot(summary.winter, aes(year, mean))
pl2 + geom_bar()
pl2 + geom_line()
pl2 <- ggplot(subdf.winter, aes(year, wrd))
pl2 + geom_boxplot()
pl2 + geom_boxplot() +
facet_grid(variable ~ locoms)
pl2 + geom_boxplot() +
facet_grid(variable ~ locoms, scales = "free")
pl2 + geom_point() + geom_smooth() +
facet_grid(variable ~ locoms, scales = "free")
pl2 + geom_point() + geom_smooth(aes(group = 1)) +
facet_grid(variable ~ locoms, scales = "free")
pl2 + geom_point() + geom_smooth(aes(group = 1), method = "lm") +
facet_grid(variable ~ locoms, scales = "free")
pl2 <- ggplot(summary.winter, aes(year, wrd))
pl2 + geom_point() + geom_smooth(aes(group = 1), method = "lm") +
facet_grid(variable ~ locoms, scales = "free")
pl2 <- ggplot(summary.winter, aes(year, mean))
pl2 + geom_point() + geom_smooth(aes(group = 1), method = "lm") +
facet_grid(variable ~ locoms, scales = "free")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
dat           <- read.csv2("d:/GIS-DATA/Nederland/EemsDoll/naarPostGis/NLWKN/monsterneming_2014_GE_OB_Ems_bewerkt2.csv",dec = ".")
dat$datetime   <- as.POSIXct(dat$datetime, format = "%d-%m-%y %H:%M")
dat$variable   <- mapvalues(as.character(dat$parhdhcod), from = submap$NLWKN_Eems, to = submap$Delwaq_long_name, warn_missing = F)

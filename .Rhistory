c("light", "nitrogen","phophorus","silica","growth", "mortality")
)
require(ggplot2)
require(scales)
## define position of annotated text to indicate different limitations
annotate.position.x <- as.POSIXct(as.numeric(min(df.lim$time)) - as.numeric(min(df.lim$time))/1200, origin = "1970-01-01 00:00:00")
z = ggplot(aes(time, value), data = df.y)
z = z + geom_line(aes(), color = "grey20", size = 0.5) +
facet_grid(variable ~ location)
# facet_wrap( ~ location)
if(plottype == 1){
z = z + geom_line(aes(x = time, y = step, color = limitation, size = value), data = df.lim)
}
if(plottype == 2) {
z = z +  geom_line(aes(x = time, y = step, color = limitation, alpha = value), data = df.lim, size = 3)
}
#   labs(x = "date", y = paste(y_name, y_unit)) +
z =  z +
labs(x = "", y = "") +
theme(text = element_text(size = 16)) +
scale_x_datetime(breaks = date_breaks("2 months"),  minor_breaks = date_breaks("month"), labels = date_format("%b")) +
scale_y_continuous(expand = c(0.15,0), breaks = pretty_breaks(n=2)(yy)) +#,
#                        labels = comma_format(digits = 1)) +
scale_size_continuous(range=c(0,4)) +
annotate("text", x = annotate.position.x, y = steps, label = lablim, size = 3) +
theme_bw(base_size = 12, base_family = "") +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
z
}
#' plot time series variable with limiting factors
#' @param arr array with model results produced with \code{his2arr}
#' @param locmod one or more locations
#' @param submod one or more variables
#' @param limmod limiting factors to plot
#' @param plottype options: 1-solid lines of varying thickness; 2- thick lines of varying transparancy
#' @return A timeseries plot with variable and limiting factors
DelwaqEcoplot2 <- function (arr, locmod, submod, limmod, plottype) {
#   if () {
#     stop("Argument invalid.")
#   }
df.y <- arr2df(arr = arr, locmod = locmod, submod = submod)
lablim = mapvalues(limmod,
c("Limit e", "Limit nit", "Limit pho", "Limit sil", "Limit gro", "Limit mor"),
c("L", "N","P","Si","gro", "mor")
)
df.lim <- arr2df(arr, locmod, limmod)
df.lim$variable <- factor(df.lim$variable)
#======= make dataframe for plotting ecoplot
yy = range(ceiling(df.y$value*10)/10, na.rm = T)
steps <- seq(-yy[2]/10, -length(limmod)*yy[2]/10, by= -yy[2]/10)
df.lim$step <- steps[as.numeric(as.factor(df.lim$variable))]
colnames(df.lim) <- mapvalues(colnames(df.lim), from = "variable", to = "limitation")
df.lim$limitation <-  mapvalues(df.lim$limitation,
c("Limit e", "Limit nit", "Limit pho", "Limit sil", "Limit gro", "Limit mor"),
c("light", "nitrogen","phophorus","silica","growth", "mortality")
)
require(ggplot2)
require(scales)
## define position of annotated text to indicate different limitations
annotate.position.x <- as.POSIXct(as.numeric(min(df.lim$time)) - as.numeric(min(df.lim$time))/1200, origin = "1970-01-01 00:00:00")
z = ggplot(aes(time, value), data = df.y) +
#   geom_line(aes(), color = "grey20", size = 0.5) +
facet_grid(variable ~ location)
if(plottype == 1){
z = z + geom_line(aes(x = time, y = step, color = limitation, size = value), data = df.lim)
}
if(plottype == 2) {
z = z +  geom_line(aes(x = time, y = step, color = limitation, alpha = value), data = df.lim, size = 3)
}
#   labs(x = "date", y = paste(y_name, y_unit)) +
z =  z +
labs(x = "", y = "") +
theme(text = element_text(size = 16)) +
scale_x_datetime(breaks = date_breaks("2 months"),  minor_breaks = date_breaks("month"), labels = date_format("%b")) +
scale_y_continuous(expand = c(0.15,0), breaks = pretty_breaks(n=2)(yy)) +#,
#                        labels = comma_format(digits = 1)) +
scale_size_continuous(range=c(0,4)) +
annotate("text", x = annotate.position.x, y = steps, label = lablim, size = 3) +
theme_bw(base_size = 12, base_family = "") +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
z
}
DelwaqEcoplot(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
DelwaqEcoplot2(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
library(DelwaqR)
DelwaqEcoplot2(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
library(devtools)
install_github("wstolte/DelwaqR")
library(DelwaqR)
arr <- his2arr(filename = "DATA/NZBLOOM.his", timestamp = F, begintime = "2003-01-01 00:00:00")
dimnames(arr)
submod <- c("Chlfa", "OXY")
locmod <- c("NZR6NW020", "NZR9TS010")
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
library(ggplot2)
plot <- ggplot(df, aes(time, value))
plot +
geom_line(aes(color = variable), size = 1) +
geom_point(aes(color = variable), fill = "white",  shape = 21, size = 4) +
facet_grid((. ~ location))
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
DelwaqEcoplot2(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
DelwaqEcoplot2(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
require(plyr)
require(reshape2)
require(ggplot2)
require(scales)
#' plot time series of stacked variables
#' @param unit the unit to display on the axis
#' @param locmod one or more locations
#' @param submod one or more substances
#' @param arr array with model results produced with \code{his2arr}
#' @return A standard plot of stacked variables
plotstacked <- function(unit, locmod, submod, arr) {
df.map <- read.csv("d:/Tools&Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
#   df.map <- read.csv("p:/1205711-edspa/2012waq/metingen/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "location", "species"))
df.mod$datetime  <- as.POSIXct(x=df.mod$time)
df.mod$species   <- mapvalues(as.character(df.mod$species), from = df.map$Delwaq, to = df.map$Delwaq_long_name, warn_missing = F)
df.mod$location  <- factor(df.mod$location,levels = locmod)
#df.mod$species   <- factor(df.mod$species, levels = submod)
p <- ggplot(df.mod,aes(x=datetime,y=value))
p + geom_area(aes(fill=species)) +
facet_grid(location ~.) +
labs(title=paste("Model version: ",modversion),x="Date",y=paste(filename," (",unit,")",sep="")) +
scale_x_datetime(labels = date_format("%b"),breaks=date_breaks("months"))
}
saveseries <- function(plotdir, filename, locname, height) {
dev.off()
ggsave(file=paste(plotdir,"/", filename,"_",locname,"_area",".png",sep=""),
width=10,height=height,dpi=300)
}
#====================================================================================
# Ecoplot functionality
# plots output variable (often fPPtot)
# and limiting factors in colored lines at the bottom
# author: Willem Stolte
#====================================================================================
#' plot time series variable with limiting factors
#' @param arr array with model results produced with \code{his2arr}
#' @param locmod one or more locations
#' @param submod one or more variables
#' @param limmod limiting factors to plot
#' @param plottype 1-solid lines of varying thickness; 2- thick lines of varying transparancy
#' @return A timeseries plot with variable and limiting factors
#' @examples
#' library(DelwaqR)
#' arr <- his2arr(filename = "DATA/NZBLOOM.his", timestamp = F, begintime = "2003-01-01 00:00:00")
#' dimnames(arr)
#' submod <- c("Chlfa", "OXY")
#' locmod <- c("NZR6NW020", "NZR9TS010")
#' df <- arr2df(arr, locmod=locmod, submod=submod)
#' df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
#' library(ggplot2)
#' plot <- ggplot(df, aes(time, value))
#' plot +
#'   geom_line(aes(color = variable), size = 1) +
#'   geom_point(aes(color = variable), fill = "white",  shape = 21, size = 4) +
#'   facet_grid((. ~ location))
#' limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
#' DelwaqEcoplot(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
#' DelwaqEcoplot2(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
DelwaqEcoplot <- function (arr, locmod, submod, limmod, plottype) {
#   if () {
#     stop("Argument invalid.")
#   }
df.y <- arr2df(arr = arr, locmod = locmod, submod = submod)
lablim = mapvalues(limmod,
c("Limit e", "Limit nit", "Limit pho", "Limit sil", "Limit gro", "Limit mor"),
c("L", "N","P","Si","gro", "mor")
)
df.lim <- arr2df(arr, locmod, limmod)
df.lim$variable <- factor(df.lim$variable)
#======= make dataframe for plotting ecoplot
yy = range(ceiling(df.y$value*10)/10, na.rm = T)
steps <- seq(-yy[2]/10, -length(limmod)*yy[2]/10, by= -yy[2]/10)
df.lim$step <- steps[as.numeric(as.factor(df.lim$variable))]
colnames(df.lim) <- mapvalues(colnames(df.lim), from = "variable", to = "limitation")
df.lim$limitation <-  mapvalues(df.lim$limitation,
c("Limit e", "Limit nit", "Limit pho", "Limit sil", "Limit gro", "Limit mor"),
c("light", "nitrogen","phophorus","silica","growth", "mortality")
)
require(ggplot2)
require(scales)
## define position of annotated text to indicate different limitations
annotate.position.x <- as.POSIXct(as.numeric(min(df.lim$time)) - as.numeric(min(df.lim$time))/1200, origin = "1970-01-01 00:00:00")
z = ggplot(aes(time, value), data = df.y)
z = z + geom_line(aes(), color = "grey20", size = 0.5) +
facet_grid(variable ~ location)
# facet_wrap( ~ location)
if(plottype == 1){
z = z + geom_line(aes(x = time, y = step, color = limitation, size = value), data = df.lim)
}
if(plottype == 2) {
z = z +  geom_line(aes(x = time, y = step, color = limitation, alpha = value), data = df.lim, size = 3)
}
#   labs(x = "date", y = paste(y_name, y_unit)) +
z =  z +
labs(x = "", y = "") +
theme(text = element_text(size = 16)) +
scale_x_datetime(breaks = date_breaks("2 months"),  minor_breaks = date_breaks("month"), labels = date_format("%b")) +
scale_y_continuous(expand = c(0.15,0), breaks = pretty_breaks(n=2)(yy)) +#,
#                        labels = comma_format(digits = 1)) +
scale_size_continuous(range=c(0,4)) +
annotate("text", x = annotate.position.x, y = steps, label = lablim, size = 3) +
theme_bw(base_size = 12, base_family = "") +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
z
}
#' plot time series variable with limiting factors
#' @param arr array with model results produced with \code{his2arr}
#' @param locmod one or more locations
#' @param submod one or more variables
#' @param limmod limiting factors to plot
#' @param plottype options: 1-solid lines of varying thickness; 2- thick lines of varying transparancy
#' @return A timeseries plot with variable and limiting factors
#' @examples
#' library(DelwaqR)
#' arr <- his2arr(filename = "DATA/NZBLOOM.his", timestamp = F, begintime = "2003-01-01 00:00:00")
#' dimnames(arr)
#' submod <- c("Chlfa", "OXY")
#' locmod <- c("NZR6NW020", "NZR9TS010")
#' df <- arr2df(arr, locmod=locmod, submod=submod)
#' df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
#' library(ggplot2)
#' plot <- ggplot(df, aes(time, value))
#' plot +
#'   geom_line(aes(color = variable), size = 1) +
#'   geom_point(aes(color = variable), fill = "white",  shape = 21, size = 4) +
#'   facet_grid((. ~ location))
#' limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
#' DelwaqEcoplot(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
#' DelwaqEcoplot2(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
DelwaqEcoplot2 <- function (arr, locmod, submod, limmod, plottype) {
#   if () {
#     stop("Argument invalid.")
#   }
df.y <- arr2df(arr = arr, locmod = locmod, submod = submod)
lablim = mapvalues(limmod,
c("Limit e", "Limit nit", "Limit pho", "Limit sil", "Limit gro", "Limit mor"),
c("L", "N","P","Si","gro", "mor")
)
df.lim <- arr2df(arr, locmod, limmod)
df.lim$variable <- factor(df.lim$variable)
#======= make dataframe for plotting ecoplot
yy = range(ceiling(df.y$value*10)/10, na.rm = T)
steps <- seq(-yy[2]/10, -length(limmod)*yy[2]/10, by= -yy[2]/10)
df.lim$step <- steps[as.numeric(as.factor(df.lim$variable))]
colnames(df.lim) <- mapvalues(colnames(df.lim), from = "variable", to = "limitation")
df.lim$limitation <-  mapvalues(df.lim$limitation,
c("Limit e", "Limit nit", "Limit pho", "Limit sil", "Limit gro", "Limit mor"),
c("light", "nitrogen","phophorus","silica","growth", "mortality")
)
require(ggplot2)
require(scales)
## define position of annotated text to indicate different limitations
annotate.position.x <- as.POSIXct(as.numeric(min(df.lim$time)) - as.numeric(min(df.lim$time))/1200, origin = "1970-01-01 00:00:00")
z = ggplot(aes(time, value), data = df.y) +
#   geom_line(aes(), color = "grey20", size = 0.5) +
facet_grid(variable ~ location)
if(plottype == 1){
z = z + geom_line(aes(x = time, y = step, color = limitation, size = value), data = df.lim)
}
if(plottype == 2) {
z = z +  geom_line(aes(x = time, y = step, color = limitation, alpha = value), data = df.lim, size = 3)
}
#   labs(x = "date", y = paste(y_name, y_unit)) +
z =  z +
labs(x = "", y = "") +
theme(text = element_text(size = 16)) +
scale_x_datetime(breaks = date_breaks("2 months"),  minor_breaks = date_breaks("month"), labels = date_format("%b")) +
scale_y_continuous(expand = c(0.15,0), breaks = pretty_breaks(n=2)(yy)) +#,
#                        labels = comma_format(digits = 1)) +
scale_size_continuous(range=c(0,4)) +
annotate("text", x = annotate.position.x, y = steps, label = lablim, size = 3) +
theme_bw(base_size = 12, base_family = "") +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
z
}
DelwaqEcoplot2(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
DelwaqEcoplot1(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
DelwaqEcoplot(arr = arr, locmod = locmod, submod = submod, limmod = limmod, plottype = 1)
document("Delwaq")
?as.POSIXct
arr2df <- function(arr, locmod, submod) {
require(reshape2)
#   df.map <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
#   df.map <- read.csv("p:/1205711-edspa/2012waq/metingen/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
if(length(submod) != 1 & length(locmod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "location", "variable"))
}
if(length(submod) == 1 & length(locmod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "location"))
df.mod$variable <- submod
}
if(length(locmod) == 1 & length(submod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "variable"))
df.mod$location <- locmod
}
if(length(locmod) == 1 & length(submod) == 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time"))
df.mod$location <- locmod
df.mod$variable <- submod
df.mod$time <- row.names(df.mod)
}
df.mod$time  <- as.POSIXct(x=df.mod$time, format = "%Y-%m-%d %H:%M:%S")
df.mod$location  <- factor(df.mod$location,levels = locmod)
#df.mod$species   <- factor(df.mod$species, levels = submod)
return(df.mod)
}
## function for easy saving of ggplot plots
saveseries <- function(plotdir, filename, locname, height, plottype) {
dev.off()
ggsave(file=paste(plotdir,"/", filename,"_",locname, plottype, "_area",".png",sep=""),
width=10,height=height,dpi=300)
}
arr2df <- function(arr, locmod, submod) {
require(reshape2)
#   df.map <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
#   df.map <- read.csv("p:/1205711-edspa/2012waq/metingen/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
if(length(submod) != 1 & length(locmod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "location", "variable"))
}
if(length(submod) == 1 & length(locmod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "location"))
df.mod$variable <- submod
}
if(length(locmod) == 1 & length(submod) != 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time", "variable"))
df.mod$location <- locmod
}
if(length(locmod) == 1 & length(submod) == 1) {
df.mod <- melt(arr[, locmod, submod], varnames=c("time"))
df.mod$location <- locmod
df.mod$variable <- submod
df.mod$time <- row.names(df.mod)
}
df.mod$time  <- as.POSIXct(x=df.mod$time, format = "%Y-%m-%d %H:%M:%S")
df.mod$location  <- factor(df.mod$location,levels = locmod)
#df.mod$species   <- factor(df.mod$species, levels = submod)
return(df.mod)
}
## function for easy saving of ggplot plots
saveseries <- function(plotdir, filename, locname, height, plottype) {
dev.off()
ggsave(file=paste(plotdir,"/", filename,"_",locname, plottype, "_area",".png",sep=""),
width=10,height=height,dpi=300)
}
df <- arr2df(arr, locmod=locmod, submod=submod)
library(DelwaqR)
arr <- his2arr(filename = "d:\\Models\\ED\\eco-scen4-run1-28-y2_2_surf.his")
submod <- c("fPPtot", "fResptot")
locmod <- c("Ra", "Paap", "Bocht_van_Watum", "Huibertgat_oost")
df <- arr2df(arr, locmod=locmod, submod=submod)
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
View(df_wide)
df_wide$fgrossPPtot <- df_wide$fPPtot + df_wide$fResptot
df_long <- melt(df_wide)
View(df_long)
df_long <- melt(df_wide, id.vars = c("time", "location"))
View(df_long)
library(ggplot2)
plot <- ggplot(df, aes(time, value))
plot + geom_smooth(aes(color = variable), size = 1) +
facet_grid((. ~ location))
View(df_long)
plot <- ggplot(df_long, aes(time, value))
plot + geom_smooth(aes(color = variable), size = 1) +
facet_grid((. ~ location))
df_wide <- dcast(df, time + location ~ variable)
df_wide$fgrossPPtot <- df_wide$fPPtot - df_wide$fResptot
df_long <- melt(df_wide, id.vars = c("time", "location"))
library(ggplot2)
plot <- ggplot(df_long, aes(time, value))
plot + geom_smooth(aes(color = variable), size = 1) +
facet_grid((. ~ location))
dimnames(arr)
submod <- c("ExtVl", "fPPtot", "fResptot")
df <- arr2df(arr, locmod=locmod, submod=submod)
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_long, aes(ExtVl, fPPtot))
plot + geom_point(aes(color = variable), size = 1) +
facet_grid((. ~ location))
plot <- ggplot(df_wide, aes(ExtVl, fPPtot))
plot + geom_point(aes(color = variable), size = 1) +
facet_grid((. ~ location))
plot + geom_point(aes(), size = 1) +
facet_grid((. ~ location))
plot <- ggplot(df_wide, aes(ExtVl, fPPtot-fResptot))
plot + geom_point(aes(), size = 1) +
facet_grid((. ~ location))
plot + geom_point(aes(color = location), size = 1)
plot + geom_point(aes(color = location))
plot + geom_point(aes(color = location), alpha = 0.3)
df <- df[df$value >=0]
df$value <- df[df$value >=0] = NA
df$value[df$value >=0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(ExtVl, fPPtot-fResptot))
plot + geom_point(aes(color = location), alpha = 0.3)
+
plot <- ggplot(df_wide, aes(ExtVl, fPPtot-fResptot))
plot <- ggplot(df_wide, aes(ExtVl, fPPtot-fResptot))
plot + geom_point(aes(color = location), alpha = 0.3)
df$value[df$value <= 0] = NA
df$value[df$value =< 0] = NA
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value =< 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
plot <- ggplot(df_wide, aes(ExtVl, fPPtot-fResptot))
df_wide <- dcast(df, time + location ~ variable)
plot + geom_point(aes(color = location), alpha = 0.3)
df$value[df$value < 0] = NA
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value < 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(ExtVl, fPPtot-fResptot))
plot + geom_point(aes(color = location), alpha = 0.3)
locmod <- c("Ra", "Paap", "Bocht_van_Watum", "Huibertgat_oost", "Grootegat_noord")
df <- arr2df(arr, locmod=locmod, submod=submod)
dimnames(arr)
locmod <- c("Ra", "Paap", "Bocht_van_Watum", "Huibertgat_oost", "Groote_Gat_noord")
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value < 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(ExtVl, fPPtot-fResptot))
plot + geom_point(aes(color = location), alpha = 0.3)
plot <- ggplot(df_wide, aes(ExtVl, fPPtot))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.3)
submod <- c("ExtVl", "fPPtot", "fResptot")
locmod <- c("Ra", "Paap", "Bocht_van_Watum", "Huibertgat_oost", "Nieuwe_Statenzijl_bu")
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value < 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(ExtVl, fPPtot))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.3)
locmod <- c("A1","A2","A3","A4","A5","A6")
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value < 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(ExtVl, fPPtot))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.3)
plot + geom_point(aes(color = location), alpha = 0.8)
dimnames(arr)
submod <- c("ExtVl", "fPPtot", "fResptot", "BloomDepth")
locmod <- c("Ra", "Paap", "Bocht_van_Watum", "Huibertgat_oost", "Nieuwe_Statenzijl_bu")
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value < 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(BloomDepth, fPPtot))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.8)
plot <- ggplot(df_wide, aes(BloomDepth, ExtVl))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.8)
plot <- ggplot(df_wide, aes(BloomDepth, ExtVl))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.8)
plot + geom_point(aes(color = location), alpha = 0.8, size = 4)
submod <- c("ExtVl", "fPPtot", "fResptot", "BloomDepth", "Depth")
locmod <- c("Ra", "Paap", "Bocht_van_Watum", "Huibertgat_oost", "Nieuwe_Statenzijl_bu")
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value < 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(BloomDepth, Depth))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.8, size = 4)
plot <- ggplot(df_wide, aes(Depth, fPPtot))   #-fResptot
plot + geom_point(aes(color = location), alpha = 0.8, size = 4)
plot <- ggplot(df_wide, aes(Depth, fPPtot-fResptot))   #
plot + geom_point(aes(color = location), alpha = 0.8, size = 4)
dimnames(arr)
plot <- ggplot(df_wide, aes(Salinity, fPPtot-fResptot))   #
plot + geom_point(aes(color = location), alpha = 0.8, size = 4)
submod <- c("ExtVl", "fPPtot", "fResptot", "BloomDepth", "Depth", "Salinity")
locmod <- c("Ra", "Paap", "Bocht_van_Watum", "Huibertgat_oost", "Nieuwe_Statenzijl_bu")
df <- arr2df(arr, locmod=locmod, submod=submod)
df$value[df$value < 0] = NA
library(reshape2)
df$value[df$variable == "fResptot"] <- -df$value[df$variable == "fResptot"]
df_wide <- dcast(df, time + location ~ variable)
plot <- ggplot(df_wide, aes(Salinity, fPPtot-fResptot))   #
plot + geom_point(aes(color = location), alpha = 0.8, size = 4)
plot + geom_point(aes(color = location), alpha = 0.3, size = 4)
plot + geom_point(aes(color = location), alpha = 0.1, size = 4)
plot + geom_point(aes(color = location), alpha = 0.03, size = 4)
plot + geom_point(aes(color = -location), alpha = 0.03, size = 4)
plot + geom_point(aes(color = inv(location)), alpha = 0.03, size = 4)
?inv
??inv
??inverse

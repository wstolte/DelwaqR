facet_grid(variable ~ locoms, scales = "free")
pl2 + geom_point() + geom_smooth() +
facet_grid(variable ~ locoms, scales = "free")
pl2 + geom_point() + geom_smooth(aes(group = 1)) +
facet_grid(variable ~ locoms, scales = "free")
pl2 + geom_point() + geom_smooth(aes(group = 1), method = "lm") +
facet_grid(variable ~ locoms, scales = "free")
pl2 <- ggplot(summary.winter, aes(year, wrd))
pl2 + geom_point() + geom_smooth(aes(group = 1), method = "lm") +
facet_grid(variable ~ locoms, scales = "free")
pl2 <- ggplot(summary.winter, aes(year, mean))
pl2 + geom_point() + geom_smooth(aes(group = 1), method = "lm") +
facet_grid(variable ~ locoms, scales = "free")
shiny::runApp('D:/Tools_Scripts/R/ShinyMeetEems')
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
dat           <- read.csv2("d:/GIS-DATA/Nederland/EemsDoll/naarPostGis/NLWKN/monsterneming_2014_GE_OB_Ems_bewerkt2.csv",dec = ".")
dat$datetime   <- as.POSIXct(dat$datetime, format = "%d-%m-%y %H:%M")
dat$variable   <- mapvalues(as.character(dat$parhdhcod), from = submap$NLWKN_Eems, to = submap$Delwaq_long_name, warn_missing = F)
source("R/io.R")
source("R/plotfunctions.r")
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-28-y2_2-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = c("WZ590_ZO_Lauwers_oos", "Ra", "Paap", "Huibertgat_oost",
"Bocht_van_Watum", "Groote_Gat_noord", "Nieuwe_Statenzijl_bu")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
locations = c("A1", "A2", "A3", "A4", "A5", "A6")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
locations = c("IM00", "IM01", "IM02", "IM03",
"IM04", "IM05", "IM06", "IM07",
"IM08", "IM09", "IM10")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
ggsave(file.path(savedir, paste(format(Sys.Date(), "%Y%m%d"), name, "ecoplot", modversion, ".png", sep = "_")),
width = 10, height = 8)
locations = c("IM00", "IM01", "IM02", "IM03",
"IM04", "IM05", "IM06", "IM07",
"IM08", "IM09", "IM10"); name = "IMareas"
# locations = "WZ460_Wierumergronde"
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
ggsave(file.path(savedir, paste(format(Sys.Date(), "%Y%m%d"), name, "ecoplot", modversion, ".png", sep = "_")),
width = 10, height = 8)
file.path(savedir, paste(format(Sys.Date(), "%Y%m%d")
savedir
locations = c("WZ590_ZO_Lauwers_oos", "Ra", "Paap", "Huibertgat_oost",
"Bocht_van_Watum", "Groote_Gat_noord", "Nieuwe_Statenzijl_bu"); name = "randomstations"
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
ggsave(file.path(savedir, paste(format(Sys.Date(), "%Y%m%d"), name, "ecoplot", modversion, ".png", sep = "_")),
width = 10, height = 8)
locations = "WZ460_Wierumergronde"; name = "WZ460
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
locations = "WZ460_Wierumergronde"; name = "WZ460
locations = "WZ460_Wierumergronde"; name = "WZ460
locations = "WZ460_Wierumergronde"; name = "WZ460"
locations = "WZ460_Wierumergronde"; name = "WZ460"
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = locmod
locations = c("WZ590_ZO_Lauwers_oos", "Ra", "Paap", "Huibertgat_oost", "Bocht_van_Watum", "Groote_Gat_noord", "Nieuwe_Statenzijl_bu")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = c("fPPtot"), limmod = limmod, plottype = 1)
require(DelwaqR)
?his2arr
??his2arr
his2arr()
his2arr
source('D:/GitHubClones/DelwaqR/R/io.R', echo=TRUE)
?his2arr
?his2arr()
library(DelwaqR)
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-28-y2_2-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
dim(modarr)
modversion = "eco-scen4-run1-28-y2_2"
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
df <- arr2df(modarr)
subs <- c("NO3", "PO4"); locs = "WZ590_ZO_Lauwers_oos"
df <- arr2df(modarr, submod = subs, locmod = locs)
qplot(df$time, df$value)
library(ggplot2)
qplot(data = df, x = time, y = value, aes(color = variable))
str(df)
qplot(data = df, x = time, y = value, color = variable)
qplot(data = df, x = time, y = value, facets = variable, size = 3)
qplot(data = df, x = time, y = value, facet = variable, size = 3)
qplot(data = df, x = time, y = value, aes(facets = variable), size = 3)
qplot(data = df, x = time, y = value, aes(facets = variable ~.), size = 3)
qplot(data = df, x = time, y = value, facets = variable ~., size = 3)
qplot(data = df, x = time, y = value, facets = . ~ variable, size = 3)
qplot(data = df, x = time, y = value, facets = variable ~ ., scales = "free", size = 3)
```
p <- ggplot(data = df, aes(x = time, y = value)
p + geom_point(size = 3)
p <- ggplot(data = df, aes(x = time, y = value)
p <- ggplot(data = df, aes(x = time, y = value))
p + geom_point(size = 3)
p <- ggplot(data = df, aes(x = time, y = value))
p + geom_point(size = 3) + facet_grid(variable ~ ., scales = "free")
p + geom_point(size = 3) + facet_grid(. ~ variable, scales = "free")
??Rpres
??knitr
tabel | header1 | header2
mystyle <- list(theme(plot.title = element_text(size = rel(1.5))))
library(ggplot2)
library(plyr)
library(pander)
load(file = "R/DATA/MWTL_Veersemeer_bewerkt.Rdata")
mystyle <- list(theme(plot.title = element_text(size = rel(1.5))))
load(file = "R/DATA/MWTL_Veersemeer_bewerkt.Rdata")
require(plyr)
require(ggplot2)
require(scales)
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
# submod = c("PO4", "NO3", "NH4", "Si"); plotname = "nutrients"
submod = c("Salinity", "ExtVl", "Chlfa", "OXY"); plotname = "light"
# modversion = "eco-scen4-run1-random-corr-spm-34_2_bal_all-day"
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-random-corr-spm-34_2_bal_all-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
moddat <- arr2df( arr = modarr, submod = submod, locmod = locmod)
moddat$variable   <- mapvalues(as.character(moddat$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
# moddat$variable <- factor(moddat$variable, levels = submod)
# # im_dat <-read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\IMARES\\2013_nutrients_long.csv",dec = ".")
im_dat <-read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\IMARES\\all_nutrients_long.csv",dec = ".")
im_dat$time <- as.POSIXct(im_dat$datetime, format = "%d-%m-%y %H:%M")
im_dat$variable   <- mapvalues(as.character(im_dat$variable), from = submap$short_name, to = submap$Delwaq, warn_missing = F)
im_dat$location <- mapvalues(as.character(im_dat$imst_loccode), from = locmap$IMARES_st, to = locmap$Delwaq_ED, warn_missing = F)
im_dat2 <- subset(im_dat, im_dat$variable %in% submod &
im_dat$location %in% locmod &
im_dat$time > min(moddat$time) &
im_dat$time < max(moddat$time))
im_dat2$variable   <- mapvalues(as.character(im_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
rws_dat <- read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\RWS\\MWTL_all.csv",dec = ".")
rws_dat$time <- as.POSIXct(rws_dat$datetime, format = "%Y-%m-%d %H:%M:%S")
rws_dat$variable   <- mapvalues(as.character(rws_dat$parhdhcod), from = submap$RWS_DONAR_parcod_hdh2, to = submap$Delwaq, warn_missing = F)
rws_dat$location <- mapvalues(as.character(rws_dat$locoms), from = locmap$locoms, to = locmap$Delwaq_ED, warn_missing = F)
rws_dat2 <- subset(rws_dat, rws_dat$variable %in% submod &
rws_dat$location %in% locmod &
rws_dat$time > min(moddat$time) &
rws_dat$time < max(moddat$time)
)
rws_dat2$variable   <- mapvalues(as.character(rws_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
#filter for high PO4 and NH4 measurements
rws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != "phosphate")
rws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != "ammonium")
require(plyr)
require(ggplot2)
require(scales)
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
# submod = c("PO4", "NO3", "NH4", "Si"); plotname = "nutrients"
submod = c("Salinity", "ExtVl", "Chlfa", "OXY"); plotname = "light"
# modversion = "eco-scen4-run1-random-corr-spm-34_2_bal_all-day"
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-random-corr-spm-34_2_bal_all-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
require(DelwaqR)
require(devtools)
install_github("wstolte/DelwaqR")
require(DelwaqR)
submap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv", header = T, stringsAsFactors=FALSE)
locmap <- read.csv2("d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv", header = T, stringsAsFactors=FALSE)
locmod = c("Huibertgat_oost", "IMARES_st_2", "IMARES_st_3b", "Bocht_van_Watum", "IMARES_st_4b", "IMARES_st_5", "Groote_Gat_noord")
# submod = c("PO4", "NO3", "NH4", "Si"); plotname = "nutrients"
submod = c("Salinity", "ExtVl", "Chlfa", "OXY"); plotname = "light"
# modversion = "eco-scen4-run1-random-corr-spm-34_2_bal_all-day"
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-random-corr-spm-34_2_bal_all-day"
savedir <- file.path(workdir, modversion)
dir.create(savedir)
modarr <- his2arr(paste(workdir, modversion, ".his", sep = ""))
moddat <- arr2df( arr = modarr, submod = submod, locmod = locmod)
moddat$variable   <- mapvalues(as.character(moddat$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
# moddat$variable <- factor(moddat$variable, levels = submod)
# # im_dat <-read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\IMARES\\2013_nutrients_long.csv",dec = ".")
im_dat <-read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\IMARES\\all_nutrients_long.csv",dec = ".")
im_dat$time <- as.POSIXct(im_dat$datetime, format = "%d-%m-%y %H:%M")
im_dat$variable   <- mapvalues(as.character(im_dat$variable), from = submap$short_name, to = submap$Delwaq, warn_missing = F)
im_dat$location <- mapvalues(as.character(im_dat$imst_loccode), from = locmap$IMARES_st, to = locmap$Delwaq_ED, warn_missing = F)
im_dat2 <- subset(im_dat, im_dat$variable %in% submod &
im_dat$location %in% locmod &
im_dat$time > min(moddat$time) &
im_dat$time < max(moddat$time))
im_dat2$variable   <- mapvalues(as.character(im_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
rws_dat <- read.csv2("d:\\GIS-DATA\\Nederland\\EemsDoll\\naarPostGis\\RWS\\MWTL_all.csv",dec = ".")
rws_dat$time <- as.POSIXct(rws_dat$datetime, format = "%Y-%m-%d %H:%M:%S")
rws_dat$variable   <- mapvalues(as.character(rws_dat$parhdhcod), from = submap$RWS_DONAR_parcod_hdh2, to = submap$Delwaq, warn_missing = F)
rws_dat$location <- mapvalues(as.character(rws_dat$locoms), from = locmap$locoms, to = locmap$Delwaq_ED, warn_missing = F)
rws_dat2 <- subset(rws_dat, rws_dat$variable %in% submod &
rws_dat$location %in% locmod &
rws_dat$time > min(moddat$time) &
rws_dat$time < max(moddat$time)
)
rws_dat2$variable   <- mapvalues(as.character(rws_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)
#filter for high PO4 and NH4 measurements
rws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != "phosphate")
rws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != "ammonium")
# castim_dat <- dcast(im_dat, formula = time +  location ~ variable)
p <- ggplot(moddat,(aes(time, value)))
p + geom_line(color = "darkolivegreen", size = 1) +
geom_point(data = im_dat2, aes(time, value), color = "blue", size = 3, alpha = 0.6) +
geom_point(data = rws_dat2, aes(time, wrd), color = "red", size = 3, alpha = 0.6) +
facet_grid(variable ~ location, scales = "free") +
scale_x_datetime(breaks = date_breaks("2 months"),
labels = date_format("%b"))
ggsave(file.path(savedir, paste(plotname, modversion, ".png", sep = "_")),
width = 12, height = 10)
##===============================================
## MAKE ECOPLOT DIAGRAMS
##==============================================
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil", "Limit gro", "Limit mor")
locations = c("IM02", "IM03", "IM04")
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "Chlfa", limmod = limmod, plottype = 1)
##===============================================
## MAKE TARGET DIAGRAMS
##==============================================
beginsummer <- as.POSIXct("2012-04-01")
endsummer <- as.POSIXct("2012-09-30")
im_dat2$time <- as.POSIXct(format(im_dat2$time, format = "%Y-%m-%d"))
stattable <- merge(im_dat2, moddat, by = c("time", "location", "variable"))
stattable2 <- subset(stattable, !is.na(stattable$value.x) & !is.na(stattable$value.y))
stattable2$season <- ifelse(stattable2$time < beginsummer |
stattable2$time > endsummer,
"winter","summer")
ttable <- make.target.table3(formulax = ~ variable + season, stattable2,
val_obs = "value.x", val_mod = "value.y", logtrans = F)
df.circle <- circleFun(c(0,0),2,npoints = 100)
df.sdcircle <- circleFun(c(0,0),1.4,npoints=100)
## Plot targetdiagram voor all groups
## set environment variables
setwd("d:/GIS-DATA/Noordzee/MWTL_phytoplankton/Levering_2014_Mar/")
#soi<-c("SCHAARVODDL","HANSWGL","VLISSGBISSVH")
soi<-c("GROOTGND", "HUIBGOT", "ROTTMPT3")
#List of variables: lov<-("Diat","Flag","Dino","Phaeo")
## read data file
DAT <- read.table("d:/GIS-DATA/Noordzee/MWTL_phytoplankton/Levering_2014_Mar/goedgekeurde einddata 2012-aangepast vraag helpdesk 1402-0521.csv",sep=",", header=T)
## transform "Datum" to "Date" format
DAT$Datum2 <- as.Date(as.character(DAT$Datum), "%d-%m-%y")
### check for names to exclude
notbtlcod <- c("ALGINDET", "NOCTSCIN", "NOCTSPEC", "NVT") ## exclude (personal comm. Theo Prins)
DAT_out <- subset(DAT, DAT$btlcod  %in% notbtlcod)
dim(DAT_out)[1] == 0
## keep only relevant columns
keepdat <- c("Locatie", "CRDtyp", "Xcrd", "Ycrd", "Datum2", "TWN.naam", "TWN.opmerkingen", "meetwaarde", "SGK.code")
DAT2 <- DAT[keepdat]
## read file with information on species (metadata)
WAT<-read.table("d:/GIS-DATA/Noordzee/MWTL_phytoplankton/TBL-WAT-BEWERKT.csv",sep=",", header=T)
## keep only relevant columns
keepwat <- c("btxoms", "btlcod", "sgkcod", "sgkoms", "BIOVLME_", "BIOMSA_", "CHLFa_", "Trofie", "Agg_GEM", "Ecologische.informatie")
WAT2 <- WAT[keepwat]
## check uniqueness of species (should be TRUE)
length(WAT2[,1]) == length(unique(cbind(as.character(WAT2$btxoms), as.character(WAT2$sgkcod)))[,1])  ### doubletten?
## merge data with metadata
datwat <- merge.data.frame(DAT2, WAT2, by.x = c("TWN.naam", "SGK.code"), by.y = c("btxoms", "sgkcod"), all.x = T)
datwat <- subset(datwat, datwat$Trofie == "fototroof")
# write.table(datwat, "2012-merged.csv", sep = ";", row.names = F)
## a little note on units:
##        meetwaarde in cells/l
##        biovolume in um3 of 1E-15 liter
##        biomass will be in pg C/cell
datwatdiatTemp <- subset(datwat, datwat$Agg_GEM == "DIAT")
datwatnondiatTemp <- subset(datwat, datwat$Agg_GEM != "DIAT")
datwatdiatTemp$BIOMSA_ <- 0.288 * datwatdiatTemp$BIOVLME_^0.811
datwatnondiatTemp$BIOMSA_ <- 0.216 * datwatnondiatTemp$BIOVLME_^0.939
datwat2 <- rbind(datwatdiatTemp, datwatnondiatTemp)
datwat2$biomass_gC_m3 <- datwat2$meetwaarde * datwat2$BIOMSA_/1E9
require(plyr)
GEM2012 <- ddply(datwat2, Agg_GEM ~ Locatie + Datum2 + CRDtyp + Xcrd + Ycrd, summarize,
GEMbiomass_gC_m3 = sum(biomass_gC_m3))
colnames(GEM2012) <- c("variable", "location", "date", "CRDtyp", "Xcrd", "Ycrd", "biomass_gC_m3")
# write.table(GEM2012, "GEM2012ED.csv", sep = ";", row.names = F)
require(ggplot2)
Cscale <- c(0,2)
Cscale2 <- c(0,0.75)
sps=c( "DIAT", "DINO", "FLAG", "PHAE")
GEM2012a = subset(GEM2012, location %in% soi & variable %in% sps)
# GEM2012a = subset(GEM2012, location %in% soi)
p <- ggplot(GEM2012a, aes(date, biomass_gC_m3))
p + geom_point(size = 1 ,aes(color = variable)) +
geom_line(size = 1, aes(color = variable)) +
#   scale_y_continuous(limits = Cscale2) +
facet_wrap(~location) +
scale_y_log10()
GEM2012$month <- format(GEM2012$date, format = "%b")
GEM2012$month <- factor(GEM2012$month, levels = month.abb)
q <- ggplot(GEM2012, aes(month, biomass_gC_m3))
q + geom_boxplot(aes(fill = variable)) +
scale_y_log10()
r <- ggplot(GEM2012, aes(log10(biomass_gC_m3)))
r + geom_histogram() +
geom_vline(aes(xintercept = log10(mean(GEM2012a$biomass_gC_m3))),
size = 3, color = "yellow")
str(DAT)
unique(DAT$Locatie)
summary(DAT$Locatie)
library(wordcloud)
paste(workdir, modversion, ".his", sep = "")
workdir <- "d:\\MODELS\\ED\\"
modversion = "eco-scen4-run1-28-y2_2-day"
paste(workdir, modversion, ".his", sep = "")
modarr <- his2arr("d:\\MODELS\\ED\\eco-scen4-run1-28-y2_2-day.his")
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
require(DelwaqR)
require(plyr)
modarr <- his2arr("d:\\MODELS\\ED\\eco-scen4-run1-28-y2_2-day.his")
limmod = c("Limit e", "Limit nit", "Limit pho", "Limit sil")
locations = c("WZ590_ZO_Lauwers_oos", "Ra"); name = "randomstations"
DelwaqEcoplot(arr = modarr, locmod = locations, submod = "fPPtot", limmod = limmod, plottype = 1)
knitcitations::ecoplot-for-homepage.Rmd
knitcitations::'ecoplot-for-homepage.Rmd''
knitcitations::'ecoplot-for-homepage.Rmd'
knitr::'ecoplot-for-homepage.Rmd'
knitr::knit('ecoplot-for-homepage.Rmd')
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('D:/GitHubClones/shiny-examples/063-superzip-example')
install.packages("DT")
shiny::runApp('D:/GitHubClones/shiny-examples/063-superzip-example')
library(leaflet)
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 4) %>%
addWMSTiles(
"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi",
layers = "nexrad-n0r-900913",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet(quakes) %>% addTiles() %>% addMarkers(
clusterOptions = markerClusterOptions()
)
shiny::runApp('D:/GitHubClones/R-NUTPRINT-Leaflet')
shiny::runApp('D:/GitHubClones/R-NUTPRINT-Leaflet')
source('D:/GitHubClones/DelwaqR/R/plotfunctions.r', echo=TRUE)
?plotstacked
plotstacked
??plotstacked
library("htmltools", lib.loc="~/R/win-library/3.2")
include
htmltools::includeCS
htmltools::include
library(igraph)
add.edges
?add.edges
?Rtools
??Rtools
library(devtools)
find_rtools(T)
Sys.getenv()['PATH']
library(devtools)
document(pkg = "DelwaqR")
document(pkg = "DelwaqR")
document(pkg = "DelwaqR")
library(devtools)
document(pkg = "DelwaqR")
library(devtools)
document(pkg = "DelwaqR")
library(devtools)
document(pkg = "DelwaqR")
document(pkg = "DelwaqR")
?DelwaqEcoplot
find_rtools()
find_topic("Git")
library(devtools)
library(DelwaqR)
arr <- his2arr(filename = "DATA/NZBLOOM.his")
?try
?"POSIXct
?POSIXct
as.POSIXct(fale nualfej)
is.POSIXct(fale nualfej)
?try
is.na.POSIXlt("1900-01-01 00:00:00")
is.na.POSIXlt("1900-0lkfaei")
?is.na.POSIXlt
is.na.POSIXlt("1900-01-01 00:00:00", format = "%Y-%m-%d %H:%M:%S")
is.na.POSIXlt("1900-01-01 00:00:00", format = "%Y-%m-%d %H:%M:%S")
is.na.POSIXlt("1900-01-01 00:00:00")
is.na.POSIXlt("1900-01-01 00:00:0")
is.na.POSIXlt("1900-01-01 00:00:")
is.na.POSIXlt("1900-01-01 00")
is.na.POSIXlt("1900-001 00")
try(is.na.POSIXlt("1900-001 00"))
try(POSIXlt("1900-001 00"))
try(as.POSIXlt("1900-001 00"))
try(as.POSIXlt("1900-001 00:00"))
try(as.POSIXlt("1900-01-01 00:00"))
try(as.POSIXlt("1900-01-01 00:00:00"))
try(as.POSIXlt("1900-01-01 00:03:00"))
try(as.POSIXlt("00-01-01 00:03:00"))
try(as.POSIXlt("ad00-01-01 00:03:00"))
try(as.POSIXlt("ad00-01-01 00:03:00"),TRUE)
if(try(as.POSIXlt("ad00-01-01 00:03:00"),TRUE))
try(as.POSIXlt("ad00-01-01 00:03:00"),TRUE)==T
try(as.POSIXlt("ad00-01-01 00:03:00"),TRUE)==F
try(as.POSIXlt("ad00-01-01 00:03:00"),TRUE)==0
?stop
timeorigin <- ifelse(is.na(as.POSIXct(timeorigin)),"1900-01-01 00:00:00",timeorigin)
timeorigin <- "alkefaiervjoijrv"
timeorigin <- ifelse(is.na(as.POSIXct(timeorigin)),"1900-01-01 00:00:00",timeorigin)
?format
timeorigin <- ifelse(is.na(try(as.POSIXct(timeorigin),T)),"1900-01-01 00:00:00",timeorigin)
timeorigin
try(as.POSIXct(timeorigin),T)
timeorigin <- ifelse(is.error(try(as.POSIXct(timeorigin),T)),"1900-01-01 00:00:00",timeorigin)
??is.error
library(evaluate)
timeorigin <- ifelse(is.error(try(as.POSIXct(timeorigin),T)),"1900-01-01 00:00:00",timeorigin)
timeorigin
timeorigin <- ifelse(is.error(as.POSIXct(timeorigin)),"1900-01-01 00:00:00",timeorigin)
eval(2 ^ 2 ^ 3)
build("DelwaqR")
install.packages("D:/GitHubClones/DelwaqR_0.1.tar.gz", repos = NULL, type = "source")
library(DelwaqR)
library(DelwaqR)
arr <- his2arr(filename = "DATA/NZBLOOM.his")
arr <- his2arr(filename = "DATA/NZBLOOM.his", timestamp = F)
document("DelwaqR")
build("DelwarR")
build("DelwaqR")

{
    "contents" : "\nrequire(plyr)\nrequire(ggplot2)\nrequire(scales)\nsubmap <- read.csv2(\"d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv\", header = T, stringsAsFactors=FALSE)\nlocmap <- read.csv2(\"d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2locations.csv\", header = T, stringsAsFactors=FALSE)\nlocmod = c(\"Huibertgat_oost\", \"IMARES_st_2\", \"IMARES_st_3b\", \"Bocht_van_Watum\", \"IMARES_st_4b\", \"IMARES_st_5\", \"Groote_Gat_noord\")\n# locmod <- c(\"EDB01area\", \"EDB03area\", \"EDB04area\", \"EDB05area\", \"EDB06area\")\nlocmod <- c(\"EDB01\", \"EDB03\", \"EDB04\", \"EDB05\", \"EDB06\")\n# locmod <- c(\"A2\")\nsubmod = c(\"ULVAF_P\", \"PO4\", \"NO3\", \"Si\"); plotname = \"BentDiatNuts\"\n# submod = c(\"Salinity\", \"ExtVl\", \"Chlfa\", \"OXY\", \"Temp\"); plotname = \"light\"\n# submod = \"Salinity\"; plotname = \"salinity\"; height = 5\n# submod = c(\"ExtVl\", \"Chlfa\"); plotname = \"light\"; height = 8\n# submod = \"OXY\"; plotname = \"O2\"; height = 6\n# submod = c(\"DOC\", \"POC\", \"TOC\" ); plotname = \"Carbon\"; height = 8\n# submod = \"Chlfa\"; plotname = \"Chlfa\"; height = 5; width = 4\nworkdir <- \"d:\\\\MODELS\\\\ED\\\\\"\n# modversion = \"eco-scen4-run1-random-corr-spm-34_2_bal_all-day\"\n# modversion = \"eco_2013-run1-28_y2-3_025-day\"\nmodversion = \"eco-scen4-run1-28-y2_2-day\"\n#  modversion = \"eco-scen4-run1-23-y2-day\"\n\nbeginsummer <- as.POSIXct(\"2012-04-01\")\nendsummer <- as.POSIXct(\"2012-09-30\")\n\n\nsavedir <- file.path(workdir, modversion)\ndir.create(savedir)\nmodarr <- his2arr(paste(workdir, modversion, \".his\", sep = \"\"))\nmoddat <- arr2df( arr = modarr, submod = submod, locmod = locmod)\nmoddat$variable   <- as.factor(mapvalues(as.character(moddat$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F))\nmoddat$variable <- factor(moddat$variable,\n                          levels = mapvalues(submod, from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F))\n\n# # im_dat <-read.csv2(\"d:\\\\GIS-DATA\\\\Nederland\\\\EemsDoll\\\\naarPostGis\\\\IMARES\\\\2013_nutrients_long.csv\",dec = \".\")\nim_dat <-read.csv2(\"d:\\\\GIS-DATA\\\\Nederland\\\\EemsDoll\\\\naarPostGis\\\\IMARES\\\\all_nutrients_long.csv\",dec = \".\")\n\nim_dat$time <- as.POSIXct(im_dat$datetime, format = \"%d-%m-%y %H:%M\")\nim_dat$variable   <- mapvalues(as.character(im_dat$variable), from = submap$short_name, to = submap$Delwaq, warn_missing = F)\nim_dat$location <- mapvalues(as.character(im_dat$imst_loccode), from = locmap$IMARES_st, to = locmap$Delwaq_ED, warn_missing = F)\nim_dat2 <- subset(im_dat, im_dat$variable %in% submod &\n                    im_dat$location %in% locmod &\n                    im_dat$time > min(moddat$time) &\n                    im_dat$time < max(moddat$time))\nim_dat2$variable   <- mapvalues(as.character(im_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)\n\nrws_dat <- read.csv2(\"d:\\\\GIS-DATA\\\\Nederland\\\\EemsDoll\\\\naarPostGis\\\\RWS\\\\MWTL_all.csv\",dec = \".\")\nrws_dat$time <- as.POSIXct(rws_dat$datetime, format = \"%d-%m-%y %H:%M\")\nrws_dat$variable   <- mapvalues(as.character(rws_dat$parhdhcod), from = submap$RWS_DONAR_parcod_hdh2, to = submap$Delwaq, warn_missing = F)\nrws_dat$location <- mapvalues(as.character(rws_dat$locoms), from = locmap$locoms, to = locmap$Delwaq_ED, warn_missing = F)\nrws_dat2 <- subset(rws_dat, rws_dat$variable %in% submod &\n                     rws_dat$location %in% locmod &\n                     rws_dat$time > min(moddat$time) &\n                     rws_dat$time < max(moddat$time)\n                   )\nrws_dat2$variable   <- mapvalues(as.character(rws_dat2$variable), from = submap$Delwaq, to = submap$Delwaq_long_name, warn_missing = F)\n\n#filter for high PO4 and NH4 measurements\nrws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != \"phosphate\")\nrws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 0.6 | rws_dat2$variable != \"ammonium\")\nrws_dat2 <- subset(rws_dat2, rws_dat2$wrd < 1e11 )\n\n# castim_dat <- dcast(im_dat, formula = time +  location ~ variable)\n\np <- ggplot(moddat,(aes(time, value)))\np + geom_line(color = \"darkolivegreen\", size = 1) +\n  geom_point(data = im_dat2, aes(time, value), color = \"blue\", size = 3, alpha = 0.6) +\n  geom_point(data = rws_dat2, aes(time, wrd), color = \"red\", size = 3, alpha = 0.6) +\n  facet_grid(variable ~ location, scales = \"free\") +\n  scale_x_datetime(breaks = date_breaks(\"2 months\"),\n                   labels = date_format(\"%b\"))\n\nggsave(file.path(savedir, paste(format(Sys.Date(),\"%Y%m%d\"), plotname, modversion, \".png\", sep = \"_\")),\n       width = 9, height = 8)\n\n##===============================================\n## MAKE ECOPLOT DIAGRAMS\n##==============================================\n\nlimmod = c(\"Limit e\", \"Limit nit\", \"Limit pho\", \"Limit sil\")\nlocations = locmod\nlocations = c(\"WZ590_ZO_Lauwers_oos\", \"Ra\", \"Paap\", \"Huibertgat_oost\", \"Bocht_van_Watum\", \"Groote_Gat_noord\", \"Nieuwe_Statenzijl_bu\")\n\nDelwaqEcoplot(arr = modarr, locmod = locations, submod = c(\"fPPtot\"), limmod = limmod, plottype = 1)\n\nggsave(file.path(savedir, paste(plotname, \"ecoplot\", modversion, \".png\", sep = \"_\")),\n       width = 10, height = 8)\n\n##===============================================\n## MAKE AVERAGES\n##==============================================\n\ntemp <- ddply(im_dat2, c(\"location\", \"variable\"), summarize,\n           mean = mean(value, na.rm = T),\n           median = median(value, na.rm = T))\n\n\n##===============================================\n## MAKE TARGET DIAGRAMS\n##==============================================\n# Make IMARES stat table\n\n\n\ndf.circle <- circleFun(c(0,0),2,npoints = 100)\ndf.sdcircle <- circleFun(c(0,0),1.4,npoints=100)\n\nim_dat2$time <- as.POSIXct(format(im_dat2$time, format = \"%Y-%m-%d\"))\nstattable <- merge(im_dat2, moddat, by = c(\"time\", \"location\", \"variable\"))\n\nstattable2 <- subset(stattable, !is.na(stattable$value.x) & !is.na(stattable$value.y))\nstattable2$season <- ifelse(stattable2$time < beginsummer |\n                                stattable2$time > endsummer,\n                              \"winter\",\"summer\")\n\nttable <- make.target.table3(formulax = ~ variable, stattable2,\n                             val_obs = \"value.x\", val_mod = \"value.y\", logtrans = T)\n## Plot targetdiagram voor all groups\nttable <- subset(ttable, ttable$nBIAS != Inf) # take out Inf's\n\nz <- ifelse(max(abs(ttable$nuRMSD), na.rm = TRUE) >\n              max(abs(ttable$nBIAS), na.rm = TRUE),\n            max(abs(ttable$nuRMSD)),\n            max(abs(ttable$nBIAS))) # maximum scale\n\nzz <- ifelse(z > 1, 1.2 * z, 1.2)  # Litle bit of room for points at the outside\nzz = 2 ## manual scale, overruling autoscale\n\np <- ggplot(ttable,aes(nuRMSD,nBIAS))\np +\n  geom_point(aes(),size=4) +\n  #   geom_point(aes(color = season),size=4) +\n  geom_path(data=df.circle,aes(x,y)) +\n  geom_path(data=df.sdcircle,aes(x,y), color=\"grey\") +\n  xlim(c(-zz,zz)) + ylim(c(-zz,zz)) +\n  theme(aspect.ratio = 1, legend.position = \"bottom\", legend.direction = \"vertical\") +\n  facet_grid(. ~ variable) +\n  theme(text = element_text(size = 16))\n\nggsave(file.path(savedir, paste(plotname, \"IM_target_var_\", modversion, \".png\", sep = \"_\")),\n       width = width)\n\n##======================================================\n\nttable <- make.target.table3(formulax = ~ variable + location, stattable2,\n                             val_obs = \"value.x\", val_mod = \"value.y\", logtrans = T)\nttable <- subset(ttable, ttable$nBIAS != Inf) # take out Inf's\n\nz <- ifelse(max(abs(ttable$nuRMSD), na.rm = TRUE) >\n              max(abs(ttable$nBIAS), na.rm = TRUE),\n            max(abs(ttable$nuRMSD)),\n            max(abs(ttable$nBIAS))) # maximum scale\n\nzz <- ifelse(z > 1, 1.2 * z, 1.2)  # Litle bit of room for points at the outside\nzz = 2 ## manual scale, overruling autoscale\n\np <- ggplot(ttable,aes(nuRMSD,nBIAS))\np +\n  geom_point(aes(color = location),size=4) +\n  #   geom_point(aes(color = season),size=4) +\n  geom_path(data=df.circle,aes(x,y)) +\n  geom_path(data=df.sdcircle,aes(x,y), color=\"grey\") +\n  xlim(c(-zz,zz)) + ylim(c(-zz,zz)) +\n  theme(aspect.ratio = 1, legend.position = \"bottom\", legend.direction = \"vertical\") +\n  facet_grid(. ~ variable) +\n  theme(text = element_text(size = 16))\n\nggsave(file.path(savedir, paste(plotname, \"IM_target_var_loc_\", modversion, \".png\", sep = \"_\")),\n       width = width)\n\n#==================================================================\nttable <- make.target.table3(formulax = ~ variable + location + season, stattable2,\n                             val_obs = \"value.x\", val_mod = \"value.y\", logtrans = T)\nttable <- subset(ttable, ttable$nBIAS != Inf) # take out Inf's\n\nz <- ifelse(max(abs(ttable$nuRMSD), na.rm = TRUE) >\n              max(abs(ttable$nBIAS), na.rm = TRUE),\n            max(abs(ttable$nuRMSD)),\n            max(abs(ttable$nBIAS))) # maximum scale\n\nzz <- ifelse(z > 1, 1.2 * z, 1.2)  # Litle bit of room for points at the outside\nzz = 2 ## manual scale, overruling autoscale\n\np <- ggplot(ttable,aes(nuRMSD,nBIAS))\np +\n  geom_point(aes(color = location),size=4) +\n  #   geom_point(aes(color = season),size=4) +\n  geom_path(data=df.circle,aes(x,y)) +\n  geom_path(data=df.sdcircle,aes(x,y), color=\"grey\") +\n  xlim(c(-zz,zz)) + ylim(c(-zz,zz)) +\n  theme(aspect.ratio = 1, legend.position = \"bottom\", legend.direction = \"vertical\") +\n  facet_grid(season ~ variable) +\n  theme(text = element_text(size = 16))\n\nggsave(file.path(savedir, paste(plotname, \"IM_target_var_loc_season\", modversion, \".png\", sep = \"_\")),\n       width = width)\n\n\n\n#for rws data=====================================================================\n\nrws_dat2$time <- as.POSIXct(format(rws_dat2$time, format = \"%Y-%m-%d\"))\nstattable <- merge(rws_dat2, moddat, by = c(\"time\", \"location\", \"variable\"))\n\nstattable2 <- subset(stattable, !is.na(stattable$wrd) & !is.na(stattable$value))\nstattable2$season <- ifelse(stattable2$time < beginsummer |\n                              stattable2$time > endsummer,\n                            \"winter\",\"summer\")\nttable <- make.target.table3(formulax = ~ variable, stattable2,\n                             val_obs = \"wrd\", val_mod = \"value\", logtrans = T)\n\ndf.circle <- circleFun(c(0,0),2,npoints = 100)\ndf.sdcircle <- circleFun(c(0,0),1.4,npoints=100)\n\n## Plot targetdiagram voor all groups\n\nlibrary(ggplot2)\n\nttable <- subset(ttable, ttable$nBIAS != Inf) # take out Inf's\n\nz <- ifelse(max(abs(ttable$nuRMSD), na.rm = TRUE) >\n              max(abs(ttable$nBIAS), na.rm = TRUE),\n            max(abs(ttable$nuRMSD)),\n            max(abs(ttable$nBIAS))) # maximum scale\n\nzz <- ifelse(z > 1, 1.2 * z, 1.2)  # Litle bit of room for points at the outside\nzz = 2 ## manual scale, overruling autoscale\n\np <- ggplot(ttable,aes(nuRMSD,nBIAS))\np +\n  geom_point(aes(),size=4) +\n  #   geom_point(aes(color = season),size=4) +\n  geom_path(data=df.circle,aes(x,y)) +\n  geom_path(data=df.sdcircle,aes(x,y), color=\"grey\") +\n  xlim(c(-zz,zz)) + ylim(c(-zz,zz)) +\n  theme(aspect.ratio = 1, legend.position = \"bottom\", legend.direction = \"vertical\") +\n  facet_grid(. ~ variable) +\n  theme(text = element_text(size = 16))\n\nggsave(file.path(savedir, paste(plotname, \"RWS_target_var_\", modversion, \".png\", sep = \"_\")),\n       width = width)\n\n##===============================================================\n\nttable <- make.target.table3(formulax = ~ variable + location, stattable2,\n                             val_obs = \"wrd\", val_mod = \"value\", logtrans = T)\n\nttable <- subset(ttable, ttable$nBIAS != Inf) # take out Inf's\n\nz <- ifelse(max(abs(ttable$nuRMSD), na.rm = TRUE) >\n              max(abs(ttable$nBIAS), na.rm = TRUE),\n            max(abs(ttable$nuRMSD)),\n            max(abs(ttable$nBIAS))) # maximum scale\n\nzz <- ifelse(z > 1, 1.2 * z, 1.2)  # Litle bit of room for points at the outside\nzz = 2 ## manual scale, overruling autoscale\n\np <- ggplot(ttable,aes(nuRMSD,nBIAS))\np +\n  geom_point(aes(color = location),size=4) +\n  #   geom_point(aes(color = season),size=4) +\n  geom_path(data=df.circle,aes(x,y)) +\n  geom_path(data=df.sdcircle,aes(x,y), color=\"grey\") +\n  xlim(c(-zz,zz)) + ylim(c(-zz,zz)) +\n  theme(aspect.ratio = 1, legend.position = \"bottom\", legend.direction = \"vertical\") +\n  facet_grid(. ~ variable) +\n  theme(text = element_text(size = 16))\n\nggsave(file.path(savedir, paste(plotname, \"RWS_target_var_loc\", modversion, \".png\", sep = \"_\")),\n       width = width)\n\n\n##===============================================================\n\nttable <- make.target.table3(formulax = ~ variable + location + season, stattable2,\n                             val_obs = \"wrd\", val_mod = \"value\", logtrans = T)\n\nttable <- subset(ttable, ttable$nBIAS != Inf) # take out Inf's\n\nz <- ifelse(max(abs(ttable$nuRMSD), na.rm = TRUE) >\n              max(abs(ttable$nBIAS), na.rm = TRUE),\n            max(abs(ttable$nuRMSD)),\n            max(abs(ttable$nBIAS))) # maximum scale\n\nzz <- ifelse(z > 1, 1.2 * z, 1.2)  # Litle bit of room for points at the outside\nzz = 2 ## manual scale, overruling autoscale\n\np <- ggplot(ttable,aes(nuRMSD,nBIAS))\np +\n  geom_point(aes(color = location),size=4) +\n  #   geom_point(aes(color = season),size=4) +\n  geom_path(data=df.circle,aes(x,y)) +\n  geom_path(data=df.sdcircle,aes(x,y), color=\"grey\") +\n  xlim(c(-zz,zz)) + ylim(c(-zz,zz)) +\n  theme(aspect.ratio = 1, legend.position = \"bottom\", legend.direction = \"vertical\") +\n  facet_grid(season ~ variable) +\n  theme(text = element_text(size = 16))\n\nggsave(file.path(savedir, paste(plotname, \"RWS_target_var_loc_season\", modversion, \".png\", sep = \"_\")),\n       width = width)\n\n\n",
    "created" : 1424167253428.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4019822873",
    "id" : "1774A8DA",
    "lastKnownWriteTime" : 1425660612,
    "path" : "D:/REPOS-CHECK-OUTS/OpenEarthTools/r/applications/Delft3D/DelwaqR/ED_validation1.R",
    "project_path" : "ED_validation1.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
{
    "contents" : "##=========================================================================##\n##                                                                         ##\n##                 Start function \"make.target.table\" version 2            ##\n##                                 -----------------                       ##\n##  Function to make a table suitable for target diagram plots containing  ##\n##             uRMSD and nBIAS for selected categories of data             ##\n##                                                                         ##\n##       Input:   formula: variables ~ .  (variables to be grouped by)     ##\n##                 df (dataframe containing data                      ##\n##                 val_obs (column with observed values)                   ##\n##                 val_mod (column with modelled values)                   ##\n##      Output:    df.target (dataframe with uRMSD and nbias)              ##\n##   Reference:    Jolliff(2009) J Mar Sys, 76(1-2), 64-82                 ##\n##      Author:    willem.stolte@deltares.nl                               ##\n##  webaddress:    https://svn.oss.deltares.nl/repos/openearthtools/       ##\n##                 trunk/r/applications/Delft3D/waq/target-function.R      ##\n##  testscript:    https://svn.oss.deltares.nl/repos/openearthtools/       ##\n##                 trunk/r/applications/Delft3D/waq/target-diagram.R       ##\n##   copyright:    Deltares                                                ##\n##                                                                         ##\n##=========================================================================##\n\nmake.target.table3 <- function (formulax, df, val_obs, val_mod, logtrans = F) {\n\n  #   TESTDATA TO RUN THE FUNCTION AS SCRIPT\n#      df = stattable\n#     formulax = ~ variable\n#     val_obs = \"value.x\"\n#     val_mod = \"value.y\"\n#      logtrans = F\n#\n  require(plyr)\n\n  #   ## Do transformation\n  #   if(logtrans) {\n  #     min_obs <- (min(df$val_obs))\n  #     min_mod <- (min(val_mod))\n  #     min_all <- (min(min_obs, min_mod))\n  #     val_obs <- (log(val_obs) + min_obs + 1)\n  #     val_mod <- (log(val_mod) + min_mod + 1)\n  #   }\n  if(logtrans)  {\n    print(\"log transformation used\") }   else {\n      print(\"no transformation\")  }\n\n  ## calculate square differences (SD)\n  if(logtrans)  {\n    df.summary <- ddply(df, formulax, here(summarise),\n                        observed = log(get(val_obs) + 1),\n                        modelled = log(get(val_mod) + 1),\n                        SD = ((log(get(val_obs) + 1) - mean(log(get(val_obs) + 1))) - (log(get(val_mod) + 1) - mean(log(get(val_mod) + 1))))^2\n    )\n  } else  {\n    df.summary <- ddply(df, formulax, here(summarise),\n                        observed = get(val_obs),\n                        modelled = get(val_mod),\n                        SD = ((get(val_obs) - mean(get(val_obs))) - (get(val_mod) - mean(get(val_mod))))^2\n    )\n  }\n\n\n  ## calculate normalized root mean square difference (uRMSD)\n  ## and normalized bias (nBIAS)\n\n  df.target <- ddply(df.summary, formulax, summarise,\n                     uRMSD = sqrt(mean(SD))*sign(sd(modelled)-sd(observed)),\n                     nuRMSD = (sqrt(mean(SD))*sign(sd(modelled)-sd(observed)))/sd(observed),\n                     nBIAS = (mean(modelled) - mean(observed))/sd(observed),\n                     BIAS = mean(modelled) - mean(observed)\n  )\n  print(\"for target diagram:\")\n  print(\"use nuRMSD as normalized unbiased RMSD\")\n  print(\"use nBIAS as normalized bias\")\n\n  return(df.target)\n}\n\n####################### end function #########################################\n\n# df.stat = read.csv(\"d:/weeber/Documents/Laptop/OpenEarthTools/Delft3D/waq/stattable.csv\")\n# str(df)\n#\n# make.target.table2(formulax = ~substance + location, df = df.stat, val_obs = \"value.x\",val_mod = \"value.y\")\n\ncircleFun <- function(center = c(0,0),diameter = 1, npoints = 100){\n  r = diameter / 2\n  tt <- seq(0,2*pi,length.out = npoints)\n  xx <- center[1] + r * cos(tt)\n  yy <- center[2] + r * sin(tt)\n  return(data.frame(x = xx, y = yy))\n}\n",
    "created" : 1424277490356.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2549886475",
    "id" : "DD8A85AE",
    "lastKnownWriteTime" : 1423480134,
    "path" : "D:/REPOS-CHECK-OUTS/OpenEarthTools/r/applications/Delft3D/DelwaqR/R/statfunctions.R",
    "project_path" : "R/statfunctions.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
{
    "contents" : "\nrequire(plyr)\nrequire(reshape2)\nrequire(ggplot2)\nrequire(scales)\n\n\nplotstacked <- function(unit, locmod, submod) {\n\n  df.map <- read.csv(\"d:/Tools&Scripts/Mapping tables/RWS2DELWAQ2names.csv\", header = T, stringsAsFactors=FALSE)\n  #   df.map <- read.csv(\"p:/1205711-edspa/2012waq/metingen/RWS2DELWAQ2names.csv\", header = T, stringsAsFactors=FALSE)\n\n  df.mod <- melt(arr[, locmod, submod], varnames=c(\"time\", \"location\", \"species\"))\n  df.mod$datetime  <- as.POSIXct(x=df.mod$time)\n  df.mod$species   <- mapvalues(as.character(df.mod$species), from = df.map$Delwaq, to = df.map$Delwaq_long_name, warn_missing = F)\n  df.mod$location  <- factor(df.mod$location,levels = locmod)\n  #df.mod$species   <- factor(df.mod$species, levels = submod)\n\n  p <- ggplot(df.mod,aes(x=datetime,y=value))\n  p + geom_area(aes(fill=species)) +\n    facet_grid(location~.) +\n    labs(title=paste(\"Model version: \",modversion),x=\"Date\",y=paste(filename,\" (\",unit,\")\",sep=\"\")) +\n    scale_x_datetime(labels = date_format(\"%b\"),breaks=date_breaks(\"months\"))\n}\n\n\nsaveseries <- function(plotdir, filename, locname, height) {\n  dev.off()\n  ggsave(file=paste(plotdir,\"/\", filename,\"_\",locname,\"_area\",\".png\",sep=\"\"),\n         width=10,height=height,dpi=300)\n}\n\n#====================================================================================\n# Ecoplot functionality\n# plots output variable (often fPPtot)\n# and limiting factors in colored lines at the bottom\n# author: Willem Stolte\n#====================================================================================\n\nDelwaqEcoplot <- function (arr, locmod, submod, limmod, plottype) {\n\n#   if () {\n#     stop(\"Argument invalid.\")\n#   }\n\n  df.y <- arr2df(arr = arr, locmod = locmod, submod = submod)\n\n   lablim = mapvalues(limmod,\n                     c(\"Limit e\", \"Limit nit\", \"Limit pho\", \"Limit sil\", \"Limit gro\", \"Limit mor\"),\n                     c(\"L\", \"N\",\"P\",\"Si\",\"gro\", \"mor\")\n                     )\n\n  df.lim <- arr2df(arr, locmod, limmod)\n  df.lim$variable <- factor(df.lim$variable)\n\n  #======= make dataframe for plotting ecoplot\n\n  yy = range(ceiling(df.y$value*10)/10, na.rm = T)\n  steps <- seq(-yy[2]/10, -length(limmod)*yy[2]/10, by= -yy[2]/10)\n  df.lim$step <- steps[as.numeric(as.factor(df.lim$variable))]\n  colnames(df.lim) <- mapvalues(colnames(df.lim), from = \"variable\", to = \"limitation\")\n  df.lim$limitation <-  mapvalues(df.lim$limitation,\n                                           c(\"Limit e\", \"Limit nit\", \"Limit pho\", \"Limit sil\", \"Limit gro\", \"Limit mor\"),\n                                           c(\"light\", \"nitrogen\",\"phophorus\",\"silica\",\"growth\", \"mortality\")\n  )\n\n\n\n  require(ggplot2)\n   require(scales)\n\n  ## define position of annotated text to indicate different limitations\n  annotate.position.x <- as.POSIXct(as.numeric(min(df.lim$time)) - as.numeric(min(df.lim$time))/1200, origin = \"1970-01-01 00:00:00\")\n\n  z = ggplot(aes(time, value), data = df.y)\n  z = z + geom_line(aes(), color = \"grey20\", size = 0.5) + facet_wrap( ~ location)\n  if(plottype == 1){\n    z = z + geom_line(aes(x = time, y = step, color = limitation, size = value), data = df.lim)\n  }\n  if(plottype == 2) {\n    z = z +  geom_line(aes(x = time, y = step, color = limitation, alpha = value), data = df.lim, size = 3)\n  }\n#   labs(x = \"date\", y = paste(y_name, y_unit)) +\n z =  z +\n    labs(x = \"\", y = \"\") +\n    theme(text = element_text(size = 16)) +\n    scale_x_datetime(breaks = date_breaks(\"2 months\"),  minor_breaks = date_breaks(\"month\"), labels = date_format(\"%b\")) +\n    scale_y_continuous(expand = c(0.15,0), breaks = pretty_breaks(n=2)(yy)) +#,\n#                        labels = comma_format(digits = 1)) +\n    scale_size_continuous(range=c(0,4)) +\n    annotate(\"text\", x = annotate.position.x, y = steps, label = lablim, size = 3) +\n    theme_bw(base_size = 12, base_family = \"\") +\n    theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))\nz\n}\n",
    "created" : 1423560090838.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "824675434",
    "id" : "2BC5169",
    "lastKnownWriteTime" : 1423752529,
    "path" : "D:/REPOS-CHECK-OUTS/OpenEarthTools/r/applications/Delft3D/DelwaqR/R/plotfunctions.r",
    "project_path" : "R/plotfunctions.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}
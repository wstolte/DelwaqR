{
    "contents" : "\n#' convert Delwaq his file into an R array object,\n#'\n#' @param filename the .his file to be converted.\n#' @return An R array object of the Delwaq .his file named  \\code{filename}.\n#' @examples\n#' arr <- his2arr(example.his)\n#' dimnames(arr)\nhis2arr <- function(filename){\n  require(\"stringr\")\n  ## Open file in binary mode\n  zz <- file(filename, \"rb\")\n  ## Read header lines\n  readChar(zz,40)\n  readChar(zz,40)\n  readChar(zz,40)\n  readChar(zz,4)\n  ## reads time origin from Delwaq his file\n  timeorigin <- readChar(zz,19)\n  readChar(zz,17)\n  ## Read 2 integers\n  afm <- readBin(zz,integer(),n=2)\n  ## reserve some memory\n  syname <- vector(\"character\",afm[1])\n  idump <- vector(\"integer\",afm[2])\n  duname <- vector(\"integer\",afm[2])\n  ## Now a row of characters\n  for(i in 1:afm[1]){\n    syname[i] <- readChar(zz,20)\n  }\n  ## Now a few rows of integers and strings\n  for(i in 1:afm[2]){\n    idump[i] <- readBin(zz,integer(),n=1)\n    duname[i] <- readChar(zz,20)\n  }\n\n  loc <- seek(zz)\n  it <- -1\n  itn <- vector(\"integer\",0)\n  tel<-0\n  ## Keep reading until we no longer have data\n  while(length(it)>0){\n    tel<-tel+1\n    it<-readBin(zz,integer(),n=1)\n    if (length(it)>0){\n      itn<-c(itn,it)\n      conc<-readBin(zz,\"double\",n=afm[1]*afm[2],size=4)\n    }\n  }\n  ## rewind\n  seek(zz, where=loc)\n  concar <- array(dim=c(length(itn),afm[2],afm[1]))\n  for(i in 1:length(itn)){\n    it <- readBin(zz,integer(),n=1)\n    concar[i,,] <- matrix(readBin(zz,\"double\",n=afm[1]*afm[2],size=4),nrow=afm[2],ncol=afm[1],byrow=T)\n  }\n  ## close file connection\n  close(zz)\n  ### adapt date names using timeorigin in his file\n  timeorigin <- str_replace_all(timeorigin,\"[.]\",\"-\")\n  itn2 <- as.character(as.POSIXct(x=as.numeric(itn), origin = timeorigin, tz = \"GMT\"))\n  dimnames(concar) <- list(itn2,str_trim(duname),str_trim(syname))\n  return(concar)\n}\n\n\n# function arr2df converts array from his2arr function into dataframe with selected\n# substances and locations\n\n#' exctract data from array into a dataframe for selected locations and substances,\n#'\n#' @param arr the array to be extracted.\n#' @param locmod the locations in the array to be extracted\n#' @param submod the substances in the array to be extracted\n#' @return A dataframe with model output values for \\code{submod} and \\code{locmod}.\n#' @examples\n#' arr <- his2arr(example.his)\n#' df.mod <- arr2df(arr, \"location\", \"substance\")\n#' str(df.mod)\narr2df <- function(arr, locmod, submod) {\n  require(reshape2)\n\n  #   df.map <- read.csv2(\"d:/Tools_Scripts/Mapping tables/RWS2DELWAQ2names.csv\", header = T, stringsAsFactors=FALSE)\n  #   df.map <- read.csv(\"p:/1205711-edspa/2012waq/metingen/RWS2DELWAQ2names.csv\", header = T, stringsAsFactors=FALSE)\n\n  if(length(submod) != 1 & length(locmod) != 1) {\n    df.mod <- melt(arr[, locmod, submod], varnames=c(\"time\", \"location\", \"variable\"))\n  }\n  if(length(submod) == 1 & length(locmod) != 1) {\n    df.mod <- melt(arr[, locmod, submod], varnames=c(\"time\", \"location\"))\n    df.mod$variable <- submod\n  }\n  if(length(locmod) == 1 & length(submod) != 1) {\n    df.mod <- melt(arr[, locmod, submod], varnames=c(\"time\", \"variable\"))\n    df.mod$location <- locmod\n  }\n  if(length(locmod) == 1 & length(submod) == 1) {\n    df.mod <- melt(arr[, locmod, submod], varnames=c(\"time\"))\n    df.mod$location <- locmod\n    df.mod$variable <- submod\n    df.mod$time <- row.names(df.mod)\n  }\n  df.mod$time  <- as.POSIXct(x=df.mod$time)\n  df.mod$location  <- factor(df.mod$location,levels = locmod)\n  #df.mod$species   <- factor(df.mod$species, levels = submod)\n  return(df.mod)\n}\n\n## function for easy saving of ggplot plots\nsaveseries <- function(plotdir, filename, locname, height, plottype) {\n  dev.off()\n  ggsave(file=paste(plotdir,\"/\", filename,\"_\",locname, plottype, \"_area\",\".png\",sep=\"\"),\n         width=10,height=height,dpi=300)\n}\n\n",
    "created" : 1423210593311.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3891925732",
    "id" : "6B63F2F",
    "lastKnownWriteTime" : 1423725250,
    "path" : "D:/REPOS-CHECK-OUTS/OpenEarthTools/r/applications/Delft3D/DelwaqR/R/io.R",
    "project_path" : "R/io.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}